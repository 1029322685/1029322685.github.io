<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Maven依赖冲突</title>
    <url>/2020/10/23/Maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<h2 id="maven依赖冲突"><a href="#maven依赖冲突" class="headerlink" title="maven依赖冲突"></a>maven依赖冲突</h2><p>由于依赖传递现象的存在，spring-webmvc-4.24依赖spring-beans-4.2.4, spring-aop-5.0.2依赖spring-beans-5.0.2,但是发现spring-beans-4.2.4加入到了工程中,而我们希望spring-beans-5.0.2加入工程。这就造成了依赖冲突。</p>
<h2 id="如何解决maven依赖冲突"><a href="#如何解决maven依赖冲突" class="headerlink" title="如何解决maven依赖冲突"></a>如何解决maven依赖冲突</h2><h4 id="使用maven提供的依赖调解原则"><a href="#使用maven提供的依赖调解原则" class="headerlink" title="使用maven提供的依赖调解原则"></a>使用maven提供的依赖调解原则</h4><ol>
<li>第一声明者优先原则：在pom文件中定义依赖，以先声明的依赖为准。其实就是根据坐标导入的顺序来确定最终使用哪个传递过来的依赖。</li>
<li>路径近者优先原则：在pom文件定义依赖，以路径近者为准。<br>还是上述情况, spring-aop和spring-webmvc都会传递过来spring-beans,那如果直接把spring-beans的依赖直接写到pom文件中,那么项目就不会再使用其他依赖传递来的spring- beans,因为自己直接在pom中定义spring-beans要比其他依赖传递过来的路径要近。</li>
</ol>
<h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>可以使用exclusions标签将传递过来的依赖排除出去</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 排除依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="锁定版本"><a href="#锁定版本" class="headerlink" title="锁定版本"></a>锁定版本</h4><p>采用直接锁定版本的方法确定依赖jar包的版本,版本锁定后则不考虑依赖的声明顺序或依赖的路径,以锁定的版本为准添加到工程中，此方法在企业开发中经常使用。</p>
<p>版本锁定的使用方式:<br>第一步:在dependencyManagement标签中锁定依赖的版本<br>第二步:在dependencies标签中声明需要导入的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖jar包版本锁定，并不会真正导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--由于已经在dependencyManagement锁定了版本，此处无需在指定version--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>






]]></content>
  </entry>
  <entry>
    <title>Mybatis整合SSM项目</title>
    <url>/2020/10/14/Mybatis%E6%95%B4%E5%90%88SSM%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><h4 id="原始整合方式环境搭建"><a href="#原始整合方式环境搭建" class="headerlink" title="原始整合方式环境搭建"></a>原始整合方式环境搭建</h4><ol>
<li>搭建数据库，创建数据库表</li>
<li>创建Maven工程</li>
<li>导入Maven坐标</li>
</ol>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>编写实体类</li>
<li>编写Mapper接口（可采用注解开发）</li>
<li>编写service接口</li>
<li>编写service接口实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        AccountMapper mapper = sqlSession.getMapper(AccountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Account&gt; accountList = mapper.findAll();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> accountList;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>编写controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accountList = accountService.findAll();</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"accountList"</span>, accountList);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"accountList"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>编写前端页面</li>
<li>编写相应配置文件<ul>
<li>Spring配置文件: applicationContext.xml</li>
<li>SprngMVC配置文件: spring-mvc.xml</li>
<li>MyBatis映射文件: AccountMapper.xml</li>
<li>MyBatis核心文件: sqlMapConfig.xml</li>
<li>数据库连接信息文件: jdbc.properties</li>
<li>Web.xmI文件: web.xml</li>
<li>日志文件: log4j.properties</li>
</ul>
</li>
</ol>
<p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springmvc前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.rainbowcat"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除controller--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>spring-mvc.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描，主要扫controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.rainbowcat.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内部资源视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"resourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开放静态资源访问权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>sqlMapConfig.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过扫包自动定义别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"top.rainbowcat.domain"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"top.rainbowcat.mapper"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该方法只对需要的实体创建别名--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="top.rainbowcat.domain.Account" alias="account" /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单独加载--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="top.rainbowcat.mapper.AccountMapper" /&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自动扫包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"top.rainbowcat.mapper"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>jdbc.properties</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//localhost:3306/ssm?serverTimezone=GMT</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=password</span><br></pre></td></tr></table></figure>
<p><strong>log4j.properties</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.err</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.ConversionPattern=%d&#123;ABSOLUTE&#125;%<span class="number">5</span>p%c&#123;<span class="number">1</span>&#125;:%L - %m%n</span><br><span class="line">log4j.rootLogger=all, stdout</span><br></pre></td></tr></table></figure>


<h4 id="mybatis整合spring"><a href="#mybatis整合spring" class="headerlink" title="mybatis整合spring"></a>mybatis整合spring</h4><p>使用spring来产生mapper并存入容器，在使用时直接从容器当中获取。<br><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.rainbowcat"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除controller的扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置sessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载mapper映射，创建mapper实现类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"top.rainbowcat.mapper"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>sqlMapConfig.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>service层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"/accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountMapper.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  accountMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="spring整合事务控制"><a href="#spring整合事务控制" class="headerlink" title="spring整合事务控制"></a>spring整合事务控制</h4><p>需要在application.xml当中添加如下配置信息：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明式事务控制--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的aop织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* top.rainbowcat.service.impl.*.*(..))"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Mybatis学习</title>
    <url>/2020/09/21/Mybatis%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="为什么要使用Mybatis"><a href="#为什么要使用Mybatis" class="headerlink" title="为什么要使用Mybatis"></a>为什么要使用Mybatis</h2><p>原始jdbc开发存在的问题如下:<br>①数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能<br>②sql语句在代码中硬编码,造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。<br>③查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置应对.<br>上述问题给出的解决方案:<br>①使用数据库连接池初始化连接资源<br>②将sql语句抽取到xm配置文件中<br>③使用反射、内省等底层技术,自动将实体与表进行属性与字段的自动映射</p>
<a id="more"></a>

<p>●mybatis 是一个优秀的基于java的持久层框架，它内部封装了<br>jdbc, 使开发者只需要关注sql语句本身，而不需要花费精力<br>去处理加载驱动、创建连接、创建statement等繁杂的过程。<br>●mybatis通过xml或注解的方式将要执行的各种statement配<br>置起来，并通过java对象和statement中sql的动态参数进行<br>映射生成最终执行的sql语句。<br>●最后mybati框架执行sql并将结果映射为java对象并返回。采<br>用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了<br>封装，屏蔽了jdbc api底层访问细节,使我们不用与jdbc api<br>打交道，就可以完成对数据库的持久化操作。</p>
<h2 id="开发步骤："><a href="#开发步骤：" class="headerlink" title="开发步骤："></a>开发步骤：</h2><p>①添加MyBatis的坐标<br>②创建user数据表<br>③编写User实体类<br>④编写映射文件UserMapper.xml<br>⑤编写核心文件SqlMapConfig.xml<br>⑥编写测试类</p>
<p>入门案例：<br>导入坐标（Maybits、MySQL）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建实体类<em>user</em><br>编写映射mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.orq/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 命名空间结合id为访问标识  方便调用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType：查询结果对应的实体类型，方便mybatis进行封装 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"top.rainbowcat.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写核心SqlMapConfig文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jsp?serverTimezone=GMT"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"top/rainbowcat/mapper/UserMapper.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>简单测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取核心配置文件</span></span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//获得session工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        <span class="comment">//获得session会话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//执行操作  参数：namespace+id</span></span><br><span class="line">        List&lt;Object&gt; userList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">        <span class="comment">//打印数据</span></span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Mybatis增删改操作：<br>插入数据：<br><strong>需要注意的是，mybatis的占位符的不是“?”！</strong><br>Sq|语句中使用#(实体属性名)方式引用实体中的属性值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>别名=<span class="string">"top.rainbowcat.domain.Student"</span>&gt;</span></span><br><span class="line">    insert into student values(#&#123;sno&#125;, #&#123;sname&#125;, #&#123;ssex&#125;, #&#123;sage&#125;, #&#123;sdept&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Mybatis执行更新操作需要提交事务（默认不提交）！</strong><br>在映射文件中使用parameterType属性指定要插入的数据类型<br><br>插入操作使用的API是sqlSession.insert(“命名空间id”,实体对象);<br><br>插入操作涉及数据库数据变化，所以要使用sqISession对象显示的提交事务,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟数据对象</span></span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setSno(<span class="string">"201211111"</span>);</span><br><span class="line">    student.setSname(<span class="string">"测试"</span>);</span><br><span class="line">    student.setSsex(<span class="string">"男"</span>);</span><br><span class="line">    student.setSage(<span class="number">20</span>);</span><br><span class="line">    student.setSdept(<span class="string">"AA"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    sqlSession.insert(<span class="string">"userMapper.save"</span>, student);</span><br><span class="line">    <span class="comment">//Mybatis执行更新操作需要提交事务（默认不提交）</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据更新：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"top.rainbowcat.domain.Student"</span>&gt;</span></span><br><span class="line">    update student set sname=#&#123;sname&#125;, ssex=#&#123;ssex&#125;, sage=#&#123;sage&#125;, sdept=#&#123;sdept&#125; where sno=#&#123;sno&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>删除数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单一条件可以直接写数据类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">    delete from student where sno=#&#123;sno&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Mybatis核心配置文件、"><a href="#Mybatis核心配置文件、" class="headerlink" title="Mybatis核心配置文件、"></a>Mybatis核心配置文件、</h2><h4 id="MyBatis核心配置文件层级关系"><a href="#MyBatis核心配置文件层级关系" class="headerlink" title="MyBatis核心配置文件层级关系"></a>MyBatis核心配置文件层级关系</h4><h6 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a>configuration配置</h6><ol>
<li>properties属性</li>
</ol>
<p><img src="/images/mybatis/properties.png" alt="图片加载失败"><br>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件, 该标签可以加载额外配的properties文件</p>
<ol>
<li>settings设置</li>
<li>typellases类型别名</li>
</ol>
<p><img src="/images/mybatis/typeAliases.png" alt="图片加载失败"><br><img src="/images/mybatis/typeAliases01.png" alt="图片加载失败"><br>3. typeHandlers类型处理器<br>4. objectFactory对象工厂<br>5. plugins插件<br>6. environments环境<br>                                                                                                                                                                                          - environment 环境变量<br>    - transactionManager 事务管理器<br>    - dataSource 数据源<br><img src="/images/mybatis/environments.png" alt="图片加载失败"><br>其中，事务管理器(transactionManager) 类型有两种:<br>●JDBC:这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。<br>●MANAGED:这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期(比如JEE应用服务器的上下文)。默认情况下它会关闭连接,然而一些容器并不希望这样，此需要将closeConnection属性设置为false来阻止它默认的关闭行为。<br>其中，数据源(dataSource) 类型有三种:<br>●UNPOOLED: 这个数据源的实现只是每次被请求时打开和关闭连接。<br>●POOLED:这种数据源的实现利用“池”的概念将JDBC连接对象组织起来。<br>●JNDI: 这个数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置<br>一个JNDI上下文的引用。</p>
<ol start="8">
<li>databaseldProvider数据库厂商标识</li>
<li>mappers映射器</li>
</ol>
<p>该标签的作用是加载映射的，加载方式有如下几种:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">●使用相对于类路径的资源引用，例如: &lt;mapper resource&#x3D; *org&#x2F;mybatis&#x2F;builder&#x2F;AuthorMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">●使用完全限定资源定位符 (URL), 例如:&lt;mapper ur&#x3D;&#x2F;le&#x2F;&#x2F;mappers&#x2F;AuthorMapperxmn&quot;&#x2F;&gt;</span><br><span class="line">●使用映射器接口实现类的完全限定类名，例如: &lt;mapper class&#x3D;&quot;org.mybatis builder.AuthorMapper*&#x2F;&gt;</span><br><span class="line">●将包内的映射器接口实现全部注册为映射器，例如: &lt;package name&#x3D;&quot;org.mybatis builder*&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"top/rainbowcat/mapper/UserMapper.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mybatis相关API"><a href="#Mybatis相关API" class="headerlink" title="Mybatis相关API"></a>Mybatis相关API</h2><h4 id="SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="SqlSession工厂构建器SqlSessionFactoryBuilder"></a>SqlSession工厂构建器SqlSessionFactoryBuilder</h4><p>常用API: Sq|SessionF actory build(InputStream inputStream)通过加载mybatis的核心文件的输入流的形式构建一个SqISessionF actory对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取核心配置文件</span></span><br><span class="line">resource = <span class="string">"xml配置文件的路径（相对于类加载路径）"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//获得session工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>
<p>其中，Resources工具类，这个类在org.apache.ibatis.io包中。Resources类帮助你从类路径下、文件系统或一个web URL中加载资源文件。</p>
<h4 id="SqlSession工厂对象SqlSessionFactory"><a href="#SqlSession工厂对象SqlSessionFactory" class="headerlink" title="SqlSession工厂对象SqlSessionFactory"></a>SqlSession工厂对象SqlSessionFactory</h4><p>SqlsessionFactory有多个个方法创建Sqlession实例。常用的有如下两个:</p>
<table>
    <tr>
        <th>方法</th>
        <th>说明</th>
    </tr>
    <tr>
        <td>openSession()</td>
        <td>会默认开启一个事务，但事务不会自动提交，也就意味着需要手动提交该事务，更新操作数据才会持久化到数据库中</td>
    </tr>
    <tr>
        <td>openSession(boolean autoCommit)</td>
        <td>参数为是否自动提交，如果设置为true,那么不需要手动提交事务</td>
    </tr>
</table>

<h4 id="SqlSession会话对象"><a href="#SqlSession会话对象" class="headerlink" title="SqlSession会话对象"></a>SqlSession会话对象</h4><p>SqlSession实例在MyBatis中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。<br>执行语句的方法主要有:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T selectOne(String statement, Object parameter)</span><br><span class="line">&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter)</span><br><span class="line">int insert (String statement, Object parameter)</span><br><span class="line">int uodate (String statement, Object parameter)</span><br><span class="line">int delete (String statement, Object parameter)</span><br></pre></td></tr></table></figure>
<p>操作事务的方法主要有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void commit()</span><br><span class="line">void rollback()</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySno"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">    select * from student where sno=#&#123;sno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = sqlSession.selectOne(<span class="string">"userMapper.findBySno"</span>, <span class="string">"201211111"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Mybatis的Dao层实现"><a href="#Mybatis的Dao层实现" class="headerlink" title="Mybatis的Dao层实现"></a>Mybatis的Dao层实现</h2><h4 id="传统开发方式"><a href="#传统开发方式" class="headerlink" title="传统开发方式"></a>传统开发方式</h4><p>使用传统的dao写法即可(接口)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMapperImpl</span> <span class="keyword">implements</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;Student&gt; studentList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代理开发方式"><a href="#代理开发方式" class="headerlink" title="代理开发方式"></a>代理开发方式</h4><p>采用Mybatis的代理开发方式实现DAO层的开发，这种方式是我们后面进入企业的主流。<br>Mapper接口开发方法只需要程序员编写Mapper接口(相当于Dao接口) ,由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同边Dao接口实现类方法。<br>Mapper接口开发需要遵循以下规范:</p>
<ol>
<li>Mapper.xml文件中的namespace 与mapper接口的全限定名相同</li>
<li>Mapper接口方法名和Mapper.xml中定义的每 个statement的id相同</li>
<li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sq|的parameterType的类型相同</li>
<li>Mapper接口方法的输出参数类型和mapper.xml中定义的每 个sql的resultType的类型相同<br><img src="/images/mybatis/userMapper.png" alt="图片加载失败"><br>mapper.xml文件中：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.rainbowcat.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"top.rainbowcat.domain.Student"</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
采用该方法，接口不需要手动实现。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    StudentMapper mapper = sqlSession.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Student&gt; studentList = mapper.findAll();</span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MyBatis映射文件深入"><a href="#MyBatis映射文件深入" class="headerlink" title="MyBatis映射文件深入"></a>MyBatis映射文件深入</h2><h4 id="动态sq-语句"><a href="#动态sq-语句" class="headerlink" title="动态sq|语句"></a>动态sq|语句</h4><h6 id="动态sq-语句概述"><a href="#动态sq-语句概述" class="headerlink" title="动态sq|语句概述"></a>动态sq|语句概述</h6>Mybatis的映射文件中，前面我们的SQL都是比较简单的，有些时候业务逻辑复杂时，我们的SQL是动态变化的，<br>比时在前面的学习中我们的SQL就不能满足要求了。</li>
<li>if</li>
</ol>
<p>使用Myatis的动态查询语句,会自动判断参数并拼接sql语句。只有在符合条件的情况下，才会进行拼接。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.rainbowcat.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">resultType</span>=<span class="string">"top.rainbowcat.domain.Student"</span> <span class="attr">parameterType</span>=<span class="string">"top.rainbowcat.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sno!=null"</span>&gt;</span></span><br><span class="line">                and sno=#&#123;sno&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sdept!=null"</span>&gt;</span></span><br><span class="line">                and sdept=#&#123;sdept&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ssex!=null"</span>&gt;</span></span><br><span class="line">                and ssex=#&#123;ssex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>choose (when, otherwise)</li>
<li>trim (where,set)</li>
<li>foreach<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySno"</span> <span class="attr">resultType</span>=<span class="string">"student"</span> <span class="attr">parameterType</span>=<span class="string">"studentMapper"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--collection：传递的参数类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"sno in ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"sno"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #&#123;sno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String &gt;();</span><br><span class="line">list.add(<span class="string">"201215004"</span>);</span><br><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;Student&gt; student = mapper.findBySno(list);</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h6 id="sql语句的抽取"><a href="#sql语句的抽取" class="headerlink" title="sql语句的抽取"></a>sql语句的抽取</h6><p>抽取前：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySno"</span> <span class="attr">resultType</span>=<span class="string">"student"</span> <span class="attr">parameterType</span>=<span class="string">"studentMapper"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  条件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>抽取后：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectStudent"</span>&gt;</span>select * from student<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBySno"</span> <span class="attr">resultType</span>=<span class="string">"student"</span> <span class="attr">parameterType</span>=<span class="string">"studentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectStudent"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  条件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>sql语句的抽取方便后期代码的维护，在修改sql语句时，能够减少修改的次数，大大提高维护效率。</p>
<h2 id="Mybatis核心配置文件深入"><a href="#Mybatis核心配置文件深入" class="headerlink" title="Mybatis核心配置文件深入"></a>Mybatis核心配置文件深入</h2><h4 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h4><p>无论是MyBatis在预处理语句(PreparedStatement) 中设置一个参数时, 还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。下表描述了-些默认的类型处理器(截取部分)。</p>
<table>
    <tr>
        <th>类型处理器</th>
        <th>Java类型</th>
        <th>JDBC类型</th>
    </tr>
    <tr>
        <td>BooleanTypeHandler</td>
        <td>java.lang.Boolean, boolean</td>
        <td>数据库兼容的BOOLEAN</td>
    </tr>
    <tr>
        <td>ByteTypeHandler</td>
        <td>java.lang.Byte, byte</td>
        <td>数据库兼容的NUMERIC或BYTE</td>
    </tr>
    <tr>
        <td>ShortTypeHandler</td>
        <td>java.lang.Short.short</td>
        <td>数据库兼容的NUMERIC或SHORT INTEGER</td>
    </tr>
    <tr>
        <td>IntegerTypeHandler</td>
        <td>java.lang.Integer，int </td>
        <td>数据库兼容的NUMERIC或INTEGER</td>
    </tr>
    <tr>
        <td>LongTypeHandler</td>
        <td>Java.lang.Long.long</td>
        <td>数据库兼容的NUMERIC或LONG INTEGER</td>
    </tr>
</table>
你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为:实现
org.apache.ibatis.type.TypeHandler接口，或继承-个很便利的类 org.apace.ibatis.type.BaseTypeHandler,然后可以选择性地将它映射到一个JDBC类型。
例如需求: 一个Java中的Date数据类型,我想将之存到数据库的时候存成一
个1970年至今的毫秒数，取出来时转换成java的Date, 即java的Date 与数据库的varchar毫秒值之间转换。
开发步骤:
1. 定义转换类继承类BaseTypeHandler
2. 覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法， getNullableResult为查询时mysql的字符串类型转换成java的Type类型的方法
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.rainbowcat.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将java转换为数据库需要的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preparedStatement 设置参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 参数的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jdbcType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//获取毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">        <span class="comment">//进行转换</span></span><br><span class="line">        preparedStatement.setLong(i, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据库中某些数据类型转换为java类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet 查询到的结果集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 数据库中要转的字段名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//获取结果集中所需要的数据</span></span><br><span class="line">        <span class="keyword">long</span> aLong = resultSet.getLong(s);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据库中某些数据类型转换为java类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> aLong = resultSet.getLong(i);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据库中某些数据类型转换为java类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callableStatement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> aLong = callableStatement.getLong(i);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
3. 在MyBatis核心配置文件中进行注册
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义类型处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"top.rainbowcat.handler.DateTypeHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>
4. 测试转换是否正确
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"测试2"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    mapper.add(user);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.findById(<span class="number">2</span>);</span><br><span class="line">    System.out.println(user.getBirthday());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>














<h4 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h4><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装,使用简单的方式即可获得分页的相关数据<br>开发步骤:</p>
<ol>
<li>导入通用PageHelper的坐标<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页助手插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在mybatis核心配置文件中配置PageHelper插件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定方言参数：不用数据库的结构化查询语句不同--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="dialect" value="mysql"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>pageHelper是如何在mybatis中是通过mybatis的pulgin实现了Interceptor接口，从而获得要执行的sql语句实现分页技术，而我们的PageHelper5.0.0版本中的这个类，并没有出现implements Interceptor，需要使用pagehelper这个包下的PageInterceptor类。</li>
<li>在PageHelper插件4.0.0以后的版本支持自动识别使用的数据库，可以不用配置 <property name="dialect" value="mysql"/> </li>
</ul>
<ol>
<li>测试分页数据获取<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    StudentMapper mapper = sqlSession.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置分页相关参数 当前页、每页显示数量</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; studentList = mapper.findAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得分页相关参数</span></span><br><span class="line">    PageInfo&lt;Student&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;Student&gt;(studentList);</span><br><span class="line">    System.out.println(<span class="string">"当前页："</span>+pageInfo.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">"每页显示条数："</span>+pageInfo.getPageSize());</span><br><span class="line">    System.out.println(<span class="string">"总条数："</span>+pageInfo.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"总页数："</span>+pageInfo.getPages());</span><br><span class="line">    System.out.println(<span class="string">"上一页："</span>+pageInfo.getNavigateLastPage());</span><br><span class="line">    System.out.println(<span class="string">"是否是第一页："</span>+pageInfo.isIsFirstPage());</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Mybatis多表操作"><a href="#Mybatis多表操作" class="headerlink" title="Mybatis多表操作"></a>Mybatis多表操作</h2><h4 id="一对一查询的模型"><a href="#一对一查询的模型" class="headerlink" title="一对一查询的模型"></a>一对一查询的模型</h4><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于个用户<br>一对一查询的需求:查询一个订单，与此同时查询出该订单所属的用户<br>order实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//当前订单属于哪个用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OrderMapper配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.rainbowcat.dao.OrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--封装一个Map--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            手动指定字段与实体属性的映射关系</span></span><br><span class="line"><span class="comment">            column：字段 property：实体属性</span></span><br><span class="line"><span class="comment">            此处使用oid时，sql语句中要有响应的别名oid</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            可代替上下面的封装方式</span></span><br><span class="line"><span class="comment">            property：当前实体（order）中属性名（private User user）</span></span><br><span class="line"><span class="comment">            javaType：当前实体中的属性类型（User），需要在朱配置文件中加别名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column="uid" property="user.id" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column="username" property="user.username" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column="password" property="user.password" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column="birthday" property="user.birthday" /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">        select *, o.id oid from orders o, users u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        OrderMapper mapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Order&gt; orders = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Order order : orders) &#123;</span><br><span class="line">            System.out.println(order);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="一对多查询的模型"><a href="#一对多查询的模型" class="headerlink" title="一对多查询的模型"></a>一对多查询的模型</h4><p>user实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前用户存在哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.rainbowcat.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配置集合信息</span></span><br><span class="line"><span class="comment">            property：集合名称</span></span><br><span class="line"><span class="comment">            ofType：当前集合中的数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--封装order的数据--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select *, u.id uid from users u, orders o where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h4><p>sql语句要从多个表中查询，查询条件也要注意。<br><code>select * from user u, user_role ur, role r where u.id=ur.userId and ur.roleId=r.id</code></p>
<h2 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h2><p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper映射文件了。我们先围绕-些基本的CRUD来学习, 再学习复杂映射多表操作。<br>@Insert:实现新增<br>@Update:实现更新<br>@Delete:实现删除<br>@Select:实现查询<br>@Result:实现结果集封装<br>@Results:可以与@Result-起使用， 封装多个结果集<br>@One:实现一对一 结果集封装<br>@Many:实现一对多结果集封装</p>
<p>mapper配置文件不需要写了，但是接口中要用注解进行映射，同时也要写sql语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from users"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>核心配置文件中不需要分别加载映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource="top/rainbowcat/mapper/UserMapper.xml" /&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource="top/rainbowcat/mapper/OrderMapper.xml" /&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只需要标注mapper配置文件所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"top.rainbowcat.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="MyBatis的注解实现复杂映射"><a href="#MyBatis的注解实现复杂映射" class="headerlink" title="MyBatis的注解实现复杂映射"></a>MyBatis的注解实现复杂映射</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置<strong>resultMap</strong>来实现，使用注解开发后,我们可以使用@Results注解，@Result注解， @One注解，@Many注解组合完成复杂关系的配置</p>
<table>
<tr>
        <th>注解</th>
        <th>说明</th>
    </tr>
    <tr>
        <td>@Results</td>
        <td>代替的是标签<strong>resultMap</strong>该注解中可以使用单个@Result注解，也可以使用@Result集合。使用格式: @Results({@Result()，@Result()}) 或@Results (@Result())</td>
    </tr>
    <tr>
        <td>@Resut</td>
        <td>代替了<strong>id</strong>标签和<strong>result</strong>标签<br>
                @Result中属性介绍:<br>
                column:数据库的列名<br>
                @Resut<br>
                property:需要装配的属性名<br>
                one:需要使用的@One注解(@Result (one= @One) () ) )<br>
                many:需要使用的@Many注解(@Result (many=@many) () ) )</td>
    </tr>
    <tr>
        <td>@One (一对一)</td>
        <td>代替了<strong>assocation</strong>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。<br>
                select:指定用来多表查询的sqlmapper<br>
                @One注解属性介绍:<br>
                使用格式: @Result(column="",property=",one= @One(select=*"))</td>
    </tr>
    <tr>
        <td>@Many (多对一)</td>··
        <td>代替了<strong>collection</strong>标签是是多表查询的关键，在注解中用来指定子查询返回对象集合。<br>
                使用格式: @Result(property=",column=",many= @Many(select="))</td>
    </tr>
</table>

<h6 id="一对一注解开发："><a href="#一对一注解开发：" class="headerlink" title="一对一注解开发："></a>一对一注解开发：</h6><p>以用户订单案例进行分析，查询某一订单对应的用户时，一个订单只能一个用户，所以在封装数据时，除了order的数据，还要封装user的实体对象数据。<br>第一种封装方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select *, o.id oid from orders o, users u where o.uid=u.id"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"oid"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"name"</span>, property = <span class="string">"name"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"user.id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"user.username"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"password"</span>, property = <span class="string">"user.password"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"user.birthday"</span>),</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二种封装方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select *, o.id oid from orders o, users u where o.uid=u.id"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"oid"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"name"</span>, property = <span class="string">"name"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(</span><br><span class="line">                    property = <span class="string">"user"</span>,  <span class="comment">//要封装的属性名称</span></span><br><span class="line">                    javaType = User<span class="class">.<span class="keyword">class</span>,  //要封装的实体类型</span></span><br><span class="line"><span class="class">                    <span class="title">column</span> </span>= <span class="string">"uid"</span>,  <span class="comment">//根据那个字段去查询（此处为orders表中的uid查询user表中的id）</span></span><br><span class="line">                    one = <span class="meta">@One</span>(select = <span class="string">"top.rainbowcat.dao.UserMapper.findById"</span>)</span><br><span class="line">            )</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="一对多注解开发"><a href="#一对多注解开发" class="headerlink" title="一对多注解开发"></a>一对多注解开发</h6><p>相比一对一的数据封装，多对多封装的不再是一个实体对象，而是实体对象的list集合。仍以用户订单为例，一个用户可以有多个订单，于是查询某个用户的订单时，需要封装订单集合。<br><br>需要在OrderMapper接口中添加根据订单id查询列表的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from orders where uid=#&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br></pre></td></tr></table></figure>
<p>UserMapper接口中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select* from users"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"username"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"password"</span>, property = <span class="string">"password"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(</span><br><span class="line">                property = <span class="string">"orderList"</span>,</span><br><span class="line">                column = <span class="string">"id"</span>,</span><br><span class="line">                javaType = List<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">many</span> </span>= <span class="meta">@Many</span>(select = <span class="string">"top.rainbowcat.dao.OrderMapper.findByUid"</span>)</span><br><span class="line">        )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndOrder</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h6 id="多对多查询的模型"><a href="#多对多查询的模型" class="headerlink" title="多对多查询的模型"></a>多对多查询的模型</h6><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用<br>多对多查询的需求:查询用户同时查询出该用户的所有色（主要区别就是多了中间表）<br>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//当前用户具备的角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"username"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"password"</span>, property = <span class="string">"password"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(</span><br><span class="line">                column = <span class="string">"id"</span>,</span><br><span class="line">                property = <span class="string">"roleList"</span>,</span><br><span class="line">                javaType = List<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">many</span> </span>= <span class="meta">@Many</span>(select = <span class="string">"top.rainbowcat.dao.RoleMapper.findByUid"</span>)</span><br><span class="line">        )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndRole</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后的and部分，是保证查询单个用户的角色</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from sys_user_role ur, sys_role r where ur.roleId=r.id and ur.userId=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/2020/07/30/Spring%20MVC/</url>
    <content><![CDATA[<h1 id="Spring集成Web环境"><a href="#Spring集成Web环境" class="headerlink" title="Spring集成Web环境"></a>Spring集成Web环境</h1><h2 id="环境集成"><a href="#环境集成" class="headerlink" title="环境集成"></a>环境集成</h2><h4 id="maven集成tomcat8插件（非官方）："><a href="#maven集成tomcat8插件（非官方）：" class="headerlink" title="maven集成tomcat8插件（非官方）："></a>maven集成tomcat8插件（非官方）：</h4><p>首先要在<strong>tomcat-users.xml</strong>的文件中加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>然后在maven本地仓库的<strong>settings.xml</strong>中加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后就可以在maven项目的pom.xml中使用tomcat插件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--tomcat8插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat8<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目的虚拟路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="pom-xml中添加坐标，集成web环境："><a href="#pom-xml中添加坐标，集成web环境：" class="headerlink" title="pom.xml中添加坐标，集成web环境："></a>pom.xml中添加坐标，集成web环境：</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="ApplicationContext应用上下文获取方式"><a href="#ApplicationContext应用上下文获取方式" class="headerlink" title="ApplicationContext应用上下文获取方式"></a>ApplicationContext应用上下文获取方式</h6><pre><code>    应用上下文对象是通过new ClasspathXmlApplicationContext(spring配置文件)方式获取的，但是每次从
容器中获得Bean时都要编写new ClasspathXmlApplicationContext(spring配置文件) ,这样的弊端是配置
文件加载多次，应用上下文对象创建多次。&lt;br&gt;
    在Web项目中，可以使用ServletContextListener监听Web应用的启动， 我们可以在Web应用启动时，就加
载Spring的配置文件，创建应用上下文对象ApplicationContext,在将其存储到最大的域servletContext域
中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。</code></pre><ol>
<li>不使用spring的实现方式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *上下文初始化监听，也即是服务器启动时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = sce.getServletContext();</span><br><span class="line">        <span class="comment">//从web.xml中获取配置文件</span></span><br><span class="line">        String contextConfigLocation = servletContext.getInitParameter(<span class="string">"contextConfigLocation"</span>);</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(contextConfigLocation);</span><br><span class="line">        <span class="comment">//将Spring的应用上下文对象存储到ServletContext域中</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"app"</span>, app);</span><br><span class="line">        System.out.println(<span class="string">"Spring容器创建完毕...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplicationContextUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回applicationContext容器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">(ServletContext servletContext)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ApplicationContext) servletContext.getAttribute(<span class="string">"app"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/userServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = WebApplicationContextUtils.getApplicationContext(request.getServletContext());</span><br><span class="line">        System.out.println(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>top.rainbowcat.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>spring提供获取应用上下文的工具<br>Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中, 提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。<br><br>使用步骤：</li>
</ol>
<ul>
<li>在web.xml中配置ContextLoaderListener监听器(导入spring-web坐标)</li>
<li>使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</li>
</ul>
<p>首先需要导入坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>web层获取方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/userServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        ApplicationContext applicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">        System.out.println(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用spring进行配置，自动生成：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置全局初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>SpringMVC是-种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中。<br>SpringMVC已经成为目前最主流的MVC框架之一,并且随着Spring3.0 的发布，全面超越Struts2,成为最优秀的MVC框架。它通过一套注解, 让-个简单的Java类成为处理请求的控制器,而无须实现任何接口。同时它还支持RESTful编程风格的请求。</p>
<h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><pre><code>- 导入SpringMVC相关坐标
- 配置SpringMVC核心控制器DispatcherServlet
- 创建Controller类和视图页面
- 使用注解配置Controller类中业务方法的映射地址
- 配置SpringMVC核心文件spring-mvc.xml
- 客户端发起请求测试</code></pre><p>导入相关坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<strong>web.xml</strong>中配置SpringMVC核心控制器DispatcherServlet：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-MVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务器启动时加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处用 / 会导致所有请求资源都要经过这里，会把响应的资源也拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--放行.jsp、.html文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建Controller类和视图页面，并使用注解进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/userSave"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"测试..."</span>);</span><br><span class="line">        <span class="comment">//此处的返回值，前面省略了redirect（重定向前缀）或forward（转发）。如：forward:/demo.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"demo.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置spring-MVC.xml文件，开启组件扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.rainbowcat.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h4><ol>
<li>SpringMVC的执行流程</li>
</ol>
<ul>
<li>用户发送请求至前端控制器DispatcherServlet,</li>
<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>
<li>处理器映射器找到具体的处理器(可以根据xm|配置、注解进行查找), 生成处理器对象及处理器拦截器(如果有则生成)-井返回给DispatcherServlet,</li>
<li>DispatcherServlet调用HandlerAdapter处理器适配器。</li>
<li>HandlerAdapter经过适配调用具体的处理器(Controller,叫后端控制器)。</li>
<li>Controller执行完成返回ModelAndView,</li>
<li>HandlerAdapter将controller执行结果ModelAndView返回给DispatchersServlet.</li>
<li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器。</li>
<li>ViewResolver解析后返回具体View.</li>
<li>DispatcherServlet根据View进行渲染视图(即将模型数据填充至视图中)。DispatcherServlet响应用户。</li>
</ul>
<ol start="2">
<li>SpringMVC注解解析</li>
</ol>
<p><strong>@RequestMapping</strong><br>作用:用于建立请求URL和处理请求方法之间的对应关系<br>位置:<br>    - 类上， 请求URL的第一级访问目录。此处不写的话，就相当于应用的根目录<br>    - 方法上， 请求URL的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</p>
<p>属性:<br>    - value:用于指定请求的URL。它和path属性的作用是一样的<br>    - method:用于指定请求的方式<br>    - params:用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模-样<br>    - params = {“accountName”),表示请求参数必须有accountName<br>    - params = {“money!100”),表示请求参数中money不能是100</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/save"</span>, method = RequestMethod.GET)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>spring的XML解析<br>springMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址<br>org/springframework/web/servlet/DispatcherServlet.properties,该文件中配置了默认的视图解析器，如下:<blockquote>
<p>org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</p>
</blockquote>
</li>
</ol>
<p>翻看该解析器源码，可以看到该解析器的默认设置，如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">REDIRECT_URL_PREFIX="redirect:" --重定向前缀</span><br><span class="line">FORWARD_URL_PREFIX ="forward:"  --转发前缀(默认值)</span><br><span class="line">prefix = "";                    --视图名称前缀</span><br><span class="line">suffix = "";                    --视图名称后缀</span><br></pre></td></tr></table></figure>
<p>在spring-MVC.xml当中配置内部资源视图解析器后，controller当中的返回值就可以简写：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最终的地址为：/jsp/demo.jsp--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>return “demo”; //不需要写资源路径的前缀和扩展名</p>
</blockquote>
<h1 id="SpringMVC数据响应"><a href="#SpringMVC数据响应" class="headerlink" title="SpringMVC数据响应"></a>SpringMVC数据响应</h1><h2 id="SpringMVC数据响应方式"><a href="#SpringMVC数据响应方式" class="headerlink" title="SpringMVC数据响应方式"></a>SpringMVC数据响应方式</h2><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><ol>
<li>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转。</li>
<li>通过ModelAndView对象返回：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Model：模型，用于封装数据</span></span><br><span class="line"><span class="comment"> * View：视图，用于展示数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//设置模型数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">"msg"</span>, <span class="string">"测试ModelAndView..."</span>);</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">"demo"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以使用可传参的方式，方便使用注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置模型数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">"msg"</span>, <span class="string">"测试ModelAndView..."</span>);</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">"demo"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以将ModelAndView进行拆分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttributeName(<span class="string">"msg"</span>, <span class="string">"测试ModelAndView..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处的Model也可以是HttpServletRequest（是形参，在使用时由框架创建），使用request。</p>
<h4 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h4><ol>
<li>直接返回字符串<ul>
<li>通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”)回写数据，此时不需要视图跳转，业务方法返回值为void,</li>
<li>将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回。</li>
</ul>
</li>
</ol>
<p>直接使用response回写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/response"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    response.getWriter().print(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用@ResponseBody注解:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/save"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">//告知springMVC框架，直接进行数据响应而不是资源跳转</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>返回对象或集合：</li>
</ol>
<p>使用Jackson将返回值转为json对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/save"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = objectMapper.writeValueAsString(user);</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用springMVC自动转换为json对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/save"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"lisi"</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>xml配置方式</strong>spring-MVC.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置消息转换器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置jackson的转换器--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在方法上添加@ResponseBody就可以返回son格式的字符串,但是这样配置比较麻烦,配置的代码比较多,因此，我们可以使用mvc的注解驱动代替上述配置。<br><strong>注解方式</strong></p>
<blockquote>
<p>&lt;mvc:annotation-driven/&gt;</p>
</blockquote>
<h1 id="SpringMVC获得请求数据"><a href="#SpringMVC获得请求数据" class="headerlink" title="SpringMVC获得请求数据"></a>SpringMVC获得请求数据</h1><p>客户端请求参数的格式是: name=value&amp;name=value…<br><br>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数:</p>
<ul>
<li>基本类型参数</li>
<li>POJO类型参数</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h2 id="基本类型参数"><a href="#基本类型参数" class="headerlink" title="基本类型参数"></a>基本类型参数</h2><p>Controller中的业务方法的参数名称要与请求参数的name一致, 参数值会自动映射匹配。<br><br>例如：客户端请求为 <code>http://localhost/spring/user/save?username=lisi&amp;age=18</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="POJO类型参数"><a href="#POJO类型参数" class="headerlink" title="POJO类型参数"></a>POJO类型参数</h2><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致, 参数值会自动映射匹配。（与实体类去匹配）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//此外还需要有一个对应的实体类</span></span><br></pre></td></tr></table></figure>

<h2 id="数组类型参数"><a href="#数组类型参数" class="headerlink" title="数组类型参数"></a>数组类型参数</h2><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配<br>例如：客户端请求为 <code>http://localhost/spring/user/save?str=aaa&amp;str=bbb&amp;str=ccc</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String[] str)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组类型默认打印地址，转成集合方便查看</span></span><br><span class="line">    System.out.println(Arrays.asList(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合类型参数"><a href="#集合类型参数" class="headerlink" title="集合类型参数"></a>集合类型参数</h2><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/save"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"userList[0].name"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"userList[0].age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"userList[1].name"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"userList[1].age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>   <span class="title">save</span><span class="params">(VO vo)</span> </span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POIO进行包装。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script src="js/jquery-3.1.1.jar"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            <span class="keyword">var</span> userList = <span class="keyword">new</span> Array();</span><br><span class="line">            userList.push(&#123;name: <span class="string">"zhangsan"</span>, age: <span class="number">18</span>&#125;);</span><br><span class="line">            userList.push(&#123;name: <span class="string">"lisi"</span>, age: <span class="number">20</span>&#125;);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">"POST"</span>,</span><br><span class="line">                url: <span class="string">"/user/save"</span>,</span><br><span class="line">                data:JSON.stringify(userList),</span><br><span class="line">                contentType: <span class="string">"json"</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>需要在spring-MVC.xml配置静态资源权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>   <span class="title">save</span><span class="params">(@RequestBody List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态资源访问的开启"><a href="#静态资源访问的开启" class="headerlink" title="静态资源访问的开启"></a>静态资源访问的开启</h2><p>方式一：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开放静态资源访问权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="请求数据乱码问题"><a href="#请求数据乱码问题" class="headerlink" title="请求数据乱码问题"></a>请求数据乱码问题</h2><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。<br><br>在web.xml中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参数绑定注解-requestParam"><a href="#参数绑定注解-requestParam" class="headerlink" title="参数绑定注解@requestParam"></a>参数绑定注解@requestParam</h2><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定。<br><br>例如：页面提交的是<code>&lt;input type=&quot;text&quot; name=&quot;lisi&quot;&gt;</code>，controller当中可以写成：<code>public void   save(@RequestParam(&quot;name&quot;)String username)</code>。<br><br>注解@RequestParam还有如下参数可以使用:</p>
<ul>
<li>value: 与请求参数名称</li>
<li>required: 此在指定的请求参数是否必须包括，默认是true, 提交时如果没有此参数则报错</li>
<li>defaultValue: 当没有指定请求参数时，则使用指定的默认值赋值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>   <span class="title">save</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"rainbow"</span>)</span>String username)</span></span><br></pre></td></tr></table></figure>
<p>当页面提交时，没有附带name参数，则不会报请求错误，使用默认值“rainbow”。</p>
<h2 id="获得Restful风格的参数"><a href="#获得Restful风格的参数" class="headerlink" title="获得Restful风格的参数"></a>获得Restful风格的参数</h2><p><strong>Restful</strong>是一种软件<strong>架构风格</strong>、 <strong>设计风格</strong>,而不是标准，只是提供了一组设计原则和约束条件。 主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。<br><br>Restful风格的请求是使用<strong>url+ 请求方式</strong>表示-次请求目的的，HTTP 协议里面四个表示操作方式的动词如下:</p>
<ul>
<li>GET:用于获取资源</li>
<li>POST:用于新建资源</li>
<li>PUT:用于更新资源</li>
<li>DELETE:用于删除资源</li>
</ul>
<p>例如：</p>
<table>
    <tr>
        <td  align="center">/user/1</td>
        <td  align="center">GET</td>
        <td  align="center">得到id= 1的user</td>
    </tr>
    <tr>
        <td  align="center">/user/1</td>
        <td  align="center">DELETE</td>
        <td  align="center">删除 id= 1的user</td>
    </tr>
    <tr>
        <td  align="center">/user/1</td>
        <td  align="center">PUT</td>
        <td  align="center">更新id= 1的user</td>
    </tr>
    <tr>
        <td  align="center">/user</td>
        <td  align="center">POST</td>
        <td  align="center">新增user</td>
    </tr>
</table>

<p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址/user/1可以写成<br>/user/{id};占位符(id)对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行 占位符的匹配获取工作。</p>
<p><code>http://localhost/spring/user/save/zhangsan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save/&#123;name&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>   <span class="title">save</span><span class="params">(@PathVariable(value = <span class="string">"name"</span>, required = <span class="keyword">true</span>)</span>String username) </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处的逻辑是：{name} –&gt; value=”name” –&gt; username</p>
<h2 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2><p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参 数设置。<br><br>但是不是所有的数据类型都提供了转换器,没有提供的就需要自定义转换器，例如: 日期类型的数据就需要自定义转换器。<br><br><strong>自定义类型转换器的开发步骤:</strong></p>
<ul>
<li>定义转换器类实现Converter接口</li>
<li>在配置文件中声明转换器</li>
<li>在&lt;annotation- driven&gt;中引用转换器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.rainbowcat.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将日期字符串转换成日期对象</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明自定义类型转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.converter.DateConverter"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置消息转换器注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h2><ol>
<li><p>@RequestHeader<br>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name)<br><br>@RequestHeader注解的属性如下:</p>
<ul>
<li>value：请求头的名称</li>
<li>required：是否必须携带此请求头</li>
</ul>
</li>
<li><p>@CookieValue.<br>使用@CookieValue可以获得指定Cookie的值<br>@CookieValue注解的属性如下:</p>
<ul>
<li>value: 指定cookie的名称</li>
<li>required: 是否必须携带此cookie</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveMethod</span><span class="params">(@RequestHeader(value = <span class="string">"User-Agent"</span>,  required = <span class="keyword">false</span>)</span> String  userAgent, @<span class="title">RequestHeader</span><span class="params">(value = <span class="string">"Cookie"</span>,  required = <span class="keyword">false</span>)</span>String  cookie) </span>&#123;</span><br><span class="line">    System.out.println(userAgent);</span><br><span class="line">    System.out.println(cookie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接获取Cookie键为"_ga"的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveMethod</span><span class="params">(@CookieValue(value = <span class="string">"_ga"</span>,  required = <span class="keyword">false</span>)</span>String  cookie)</span></span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h4 id="文件上传客户端三要素"><a href="#文件上传客户端三要素" class="headerlink" title="文件上传客户端三要素"></a>文件上传客户端三要素</h4><ol>
<li>表单项type= “file”</li>
<li>表单的提交方式是post</li>
<li>表单的enctype属性是多部分表单形式，及enctype= “mutipart/form-data’</li>
</ol>
<h4 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h4><ol>
<li>当form表单修改为多部分表单时，request.getParameter0将失效。</li>
<li>enctype= “application/x-wgww-form-urlencoded” 时, form表单的正文内容格式是:<strong>key=value&amp;key=value&amp;key=value</strong></li>
<li>当form表单的enctype取值为Mutilpart/form-data时,请求正文内容就变成多部分形式:</li>
</ol>
<h4 id="单文件上传步骤"><a href="#单文件上传步骤" class="headerlink" title="单文件上传步骤"></a>单文件上传步骤</h4><ol>
<li>导入fileupload和io坐标</li>
<li>配置文件上传解析器</li>
<li>编写文件.上传代码</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在spring-MVC.xml中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件的编码类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件总大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242800"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传单个文件的大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSizePerFile"</span> <span class="attr">value</span>=<span class="string">"5242800"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/save"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> &gt;&lt;br&gt;</span><br><span class="line">    文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=上传<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String name, MultipartFile upload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获得上传的文件名称</span></span><br><span class="line">    String originalFilename = upload.getOriginalFilename();</span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> File(<span class="string">"\\文件存储路径\\"</span> + originalFilename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是：表单中name的值要和controller中的参数一致。</p>
<h4 id="单文件上传步骤-1"><a href="#单文件上传步骤-1" class="headerlink" title="单文件上传步骤"></a>单文件上传步骤</h4><p>只需要在表单和controller中做修改：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/save"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> &gt;&lt;br&gt;</span><br><span class="line">    文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload1"</span>&gt;&lt;br&gt;</span><br><span class="line">    文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload2"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=上传<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String name, MultipartFile upload1, MultipartFile upload2)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获得上传的文件名称</span></span><br><span class="line">        String originalFilename1 = upload1.getOriginalFilename();</span><br><span class="line">        String originalFilename2 = upload2.getOriginalFilename();</span><br><span class="line">        upload1.transferTo(<span class="keyword">new</span> File(<span class="string">"\\文件存储路径\\"</span> + originalFilename1));</span><br><span class="line">        upload2.transferTo(<span class="keyword">new</span> File(<span class="string">"\\文件存储路径\\"</span> + originalFilename2));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>或者可以使用数组：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">文件<span class="number">1</span>：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>&gt;&lt;br&gt;</span><br><span class="line">文件<span class="number">2</span>：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>&gt;&lt;br&gt;</span><br><span class="line">文件<span class="number">3</span>：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String name, MultipartFile[] upload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : upload) &#123;</span><br><span class="line">        String originalFilename = multipartFile.getOriginalFilename();</span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">"\\文件存储路径\\"</span> + originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h2><p>Spring MVC的<strong>拦截器</strong>类似于Servlet开发中的过滤器Filter,用于对处理器进行<strong>预处理</strong>和<strong>后处理</strong>。<br><br>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链(Interceptor Chain)。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p>
<h4 id="拦截器和过滤器区别"><a href="#拦截器和过滤器区别" class="headerlink" title="拦截器和过滤器区别"></a>拦截器和过滤器区别</h4><p>（比较重要）</p>
<table>
    <tr>
        <th>区别</th>
        <th>过滤器</th>
        <th>拦截器</th>
    </tr>
    <tr>
        <td  align="center">使用范围</td>
        <td  align="center">是servlet规范中的一部分，任何Java Web工程都可以使用</td>
        <td  align="center">是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能用</td>
    </tr>
    <tr>
        <td  align="center">拦截范围</td>
        <td  align="center">在url-pattern中配置了/*之后，可以对所有要访问的资源拦截</td>
        <td  align="center">只会拦截访问的控制器方法，如果访问的是jsp,html,css,image或者js是不会进行拦截的</td>
    </tr>
</table>

<h4 id="如何自定义拦截器"><a href="#如何自定义拦截器" class="headerlink" title="如何自定义拦截器"></a>如何自定义拦截器</h4><ul>
<li>创建拦截器类实现HandlerInterceptor接口</li>
<li>配置拦截器</li>
<li>测试拦截器的拦截效果</li>
</ul>
<table>
    <tr>
        <th>方法名</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">preHandle()</td>
        <td  align="center">方法将在请求处理之前进行调用，该方法的返回值是布尔值Boolean类型的，
            当它返回为false时，表示请求结束，后续的Interceptor和Controller都不会
            再执行;当返回值为true时就会继续调用下一个Interceptor的preHandle方法</td>
    </tr>
    <tr>
        <td  align="center">postHandle()</td>
        <td  align="center">该方法是在当前请求进行处理之后被调用，前提是preHandle 方法的返回值为
            true时才能被调用，且它会在DispatcherServlet 进行视图返回渲染之前被调
            用，所以我们可以在这个方法中对Controller处理之后的ModelAndView对象
            进行操作</td>
    </tr>
    <tr>
        <td  align="center">afterCompletion()</td>
        <td  align="center">
            该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图
            之后执行，前提是preHandle 方法的返回值为true时才能被调用</td>
    </tr>
</table>

<p>拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 用于获取请求内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true，则放行；若返回false则被拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"yes"</span>.equals(request.getParameter(<span class="string">"param"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/error.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *目标方法执行之后，视图返回之前执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>, <span class="string">"rainbow"</span>);</span><br><span class="line">        System.out.println(<span class="string">"postHandle..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 整个流程都执行完成后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置spring-mvc.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--此处可以配置多个拦截器，需要创建相应的类--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--对哪些资源不拦截--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.interceptor.MyInterceptor"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--若配置多个拦截器，先配置的先执行--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/target"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目标方法执行..."</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>, <span class="string">"lisi"</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"index"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC异常处理"><a href="#SpringMVC异常处理" class="headerlink" title="SpringMVC异常处理"></a>SpringMVC异常处理</h2><h4 id="异常处理的思路"><a href="#异常处理的思路" class="headerlink" title="异常处理的思路"></a>异常处理的思路</h4><p>系统中异常包括两类:预期异常和运行时异常RuntimeException,前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生。</p>
<p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理，如下图:</p>
<h4 id="异常处理两种方式"><a href="#异常处理两种方式" class="headerlink" title="异常处理两种方式"></a>异常处理两种方式</h4><ol>
<li>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver<br>SpringMVC已经定义好了该类型转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认错误视图--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--此处配置异常类型和错误视图--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"java.lang.ClassCastException"</span> <span class="attr">value</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>实现Spring的异常处理接口HandlerExceptionResolver自定义自己的异常处理器</li>
</ol>
<p><strong>自定义异常处理器步骤</strong><br>    - 创建异常处理器类实现HandlerExceptionResolver<br>    - 配置异常处理器<br>    - 编写异常页面<br>    - 测试异常跳转</p>
<p>自己编写异常处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要继承HandlerExceptionResolver</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 报异常的异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 要跳转的错误视图信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//判断异常类型和要执行的操作</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ClassCastException)&#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">"info"</span>, <span class="string">"类转换异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在spring-mvc.xml进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.resolver.MyExceptionResolver"</span> /&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/07/28/Spring/</url>
    <content><![CDATA[<h1 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h1><h2 id="什么是spring"><a href="#什么是spring" class="headerlink" title="什么是spring"></a>什么是spring</h2><p>Spring是分层的Java SE/EE应用full stack轻量级开源框架,以IoC(Inverse Of Control:反转控制)和AOP(Aspect Oriented Programming:面向切面编程)为内核。</p>
<p>提供了<strong>展现层SpringMVC</strong>和<strong>持久层Spring JDBCTemplate</strong>以及<strong>业务层事务管理</strong>等众多的企业级应用技术,还能整合开源世界众多著名的第三方框架和类库,逐渐成为使用最多的Java EE企业应用开源框架。</p>
<a id="more"></a>

<h2 id="spring的优势"><a href="#spring的优势" class="headerlink" title="spring的优势"></a>spring的优势</h2><ol>
<li>方便解耦，简化开发<br>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li>
<li>AOP编程的支持<br>通过Spring的AOP功能，方便进行面向切面编程,许多不容易用传统OOP实现的功能可以通过AOP轻松实现。</li>
<li>声明式事务的支持<br>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理,提高开发效率和质量。</li>
<li>方便程序的测试<br>可以用非容器依赖的编程方式进行几乎所有的测试工作,测试不再是昂贵的操作，而是随手可做的事情。</li>
<li>方便集成各种优秀框架<br>Spring对各种优秀框架(Struts、Hibermate、Hessian、Quartz等) 的支持。</li>
<li>降低JavaEE API的使用难度<br>Spring对JavaEE API (如JDBC、JavaMail、 远程调用等)进行了薄薄的封装层，使这些API的使用难度大为降低。</li>
<li>Java源码是经典学习范例<br>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无意是Java技术的最佳实践的范例。</li>
</ol>
<h2 id="spring的体系结构"><a href="#spring的体系结构" class="headerlink" title="spring的体系结构"></a>spring的体系结构</h2><h4 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h4><ol>
<li>Beans</li>
<li>Core</li>
<li>Context</li>
<li>SpEl</li>
</ol>
<h4 id="AOP-Aspects-instrumentation-Messaging"><a href="#AOP-Aspects-instrumentation-Messaging" class="headerlink" title="AOP Aspects instrumentation Messaging"></a>AOP Aspects instrumentation Messaging</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol>
<li>Data Access/instrumentation<ul>
<li>JDBC</li>
<li>ORM</li>
<li>OXM</li>
<li>JMS</li>
<li>Transactions</li>
</ul>
</li>
<li>Web<ul>
<li>WebStocket</li>
<li>Servlet</li>
<li>Web</li>
<li>Portlet</li>
</ul>
</li>
</ol>
<h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol>
<li>Spring程序开发步骤<br>①导入Spring开发的基本包坐标<br>②编写Dao接口和实现类<br>③创建Spring核心配置文件<br>④在Spring配置文件中配置UserDaolmpl<br>⑤使用Spring的API获得Bean实例</li>
</ol>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>需要在resources目录下创建配置文件（一般为applicationContext.xml），使用Bren标签进行配置（无参构造）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"useDao"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用时，从spring的客户端中使用getBean方法获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserDao userDao = (UserDao) app.getBean(<span class="string">"userDao"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h4><p>cope：指对象的作用范围，取值如下：</p>
<table >
    <tr>
    <th>取值范围</th>
    <th>说明</th>
    </tr>
    <tr>
    <td align="center">singleton</td>
    <td  align="center">默认值，单例的（容器中只存在一个对象）<br>①在应用加载，创建容器时创建对象<br>②只要容器在，对象就一直活着<br>③当应用卸载，销毁容器时对象被销毁</td>
    </tr>
    <tr>
    <td align="center">prototype</td>
    <td  align="center">多例的<br>①当使用（getBean）对象时创建<br>②只要对象在使用中，就一直活着<br>③当对象长时间不用，会被Java的垃圾回收器回收</td>
    </tr>
    <tr>
    <td align="center">request</td>
    <td  align="center">WEB项目中，Spring创建的一个Bean对象，将对象存入request域中</td>
    </tr>
    <tr>
    <td align="center">session</td>
    <td  align="center">WEB项目中，Spring创建的一个Bean对象，将对象存入session域中</td>
    </tr>
    <tr>
    <td align="center">global session</td>
    <td  align="center">WEB项目中，应用在Portlet环境，<br>如果没有Portlet环境那么globalSession相当于session</td>
    </tr>
</table>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">bean id="useDao" class="top.rainbowcat.dao.Impl.UserDaoImpl" scope="singleton"&gt;<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Bean生命周期配置"><a href="#Bean生命周期配置" class="headerlink" title="Bean生命周期配置"></a>Bean生命周期配置</h4><p>init-method：指定类中的初始化方法名称<br>destroy-method：指定类中的销毁方法名称</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">bean id="useDao" class="top.rainbowcat.dao.Impl.UserDaoImpl" init-method="接口中的方法"&gt;<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Bean实例化三种方式"><a href="#Bean实例化三种方式" class="headerlink" title="Bean实例化三种方式"></a>Bean实例化三种方式</h4><ul>
<li>无参构造方法实例化</li>
</ul>
<blockquote>
<p>bean id=”useDao” class=”top.rainbowcat.dao.Impl.UserDaoImpl”&gt;</bean></p>
</blockquote>
<ul>
<li>工厂静态方法实例化</li>
</ul>
<blockquote>
<p>bean id=”useDao” class=”top.rainbowcat.factory.StaticFactory” factory-method=”getUserDao”&gt;</bean></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>工厂实例方法实例化</li>
</ul>
<blockquote>
<p>bean id=”factory” class=”top.rainbowcat.factory.DynamicFactory”&gt;</bean><br>bean id=”useDao” factory-bean=”factory” factory-method=”getUserDao”&gt;</bean></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h4><p>因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService,所以可以在Spring容器中，将UserDao设置到UserService内部。</p>
<ol>
<li>Bean的依赖注入概念<br>依赖注入(Dependency Injection) :它是Spring框架核心IOC的具体实现。<br>在编写程序时，通过控制反转，把对象的创建交给了Spring, 但是代码中不可能出现没有依赖的情况。<br>I0C解耦只是降低他们的依赖关系，但不会消除。例如:业务层仍会调用持久层的方法。<br>那这种业务层和持久层的依赖关系,在使用Spring之后,就让Spring来维护了。<br>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</li>
<li>Bean的依赖注入方式</li>
</ol>
<ul>
<li>set方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.service.Impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--name是service当中的set方法的属性--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ref是容器当中的id值,代表对象引用（注入普通数据类型时不能使用）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
外部程序在使用service的时候，要使用容器当中的才能正常调用dao层。直接new出来的service对象，无法获取到容器当中注入给service的dao对象。<br></li>
</ul>
<p><strong>P命名空间注入：</strong>本质上也是set方法注入，但比上述set方法注入更加方便（主要体现在配置文件中）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--首先引入P命名空间--&gt;</span></span><br><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.service.Impl.UserServiceImpl"</span> <span class="attr">p:userDao-ref</span>=<span class="string">"userDao"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>构造方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.service.Impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Bean的依赖注入的数据类型"><a href="#Bean的依赖注入的数据类型" class="headerlink" title="Bean的依赖注入的数据类型"></a>Bean的依赖注入的数据类型</h4><p>上面的操作，都是注入的引用Bean,除了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。<br><br>注入数据的三种数据类型：</p>
<ul>
<li>普通数据类型</li>
<li>引用数据类型</li>
<li>集合数据类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入普通数据类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"lisi"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入集合数据类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"u1"</span> <span class="attr">value-ref</span>=<span class="string">"user1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="引入其他配置文件（分模块开发）"><a href="#引入其他配置文件（分模块开发）" class="headerlink" title="引入其他配置文件（分模块开发）"></a>引入其他配置文件（分模块开发）</h4><p>实际开发中，Spring的配置内容非常多,这就导致Spring配置很繁杂且体积很大,所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p>
<blockquote>
<import resource="applicationContext-xxx.xml"/>
</blockquote>
<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p><strong>Spring的重要配置</strong></p>
<ol>
<li><p><code>&lt;bean&gt;</code>标签</p>
<ul>
<li>id属性:在容器中Bean实例的唯一标识， 不允许重复</li>
<li>class属性:要实例化的Bean的全限定名</li>
<li>scope属性:Bean的作用范围，常用是Singleton (默认)和prototype</li>
</ul>
</li>
<li><p><code>&lt;property&gt;</code>标签:属性注入</p>
<ul>
<li>name属性:属性名称</li>
<li>value属性:注入的普通属性值</li>
<li>ref属性:注入的对象引用值</li>
</ul>
</li>
<li><p><code>&lt;list&gt;</code>标签</p>
</li>
<li><p><code>&lt;map&gt;</code>标签</p>
</li>
<li><p><code>&lt;properties&gt;</code>标签</p>
</li>
<li><p><code>&lt;constructor-arg&gt;</code>标签</p>
</li>
<li><p><code>&lt;import&gt;</code>标签:导入其他的Spring的分文件</p>
</li>
</ol>
<h1 id="Spring的相关API"><a href="#Spring的相关API" class="headerlink" title="Spring的相关API"></a>Spring的相关API</h1><h2 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h2><ol>
<li>ClassPathXmlApplicationContext<br>它是从类的根路径下加载配置文件推荐使用这种。</li>
<li>FileSystemXmlApplicationContext<br>它是从磁盘路径.上加载配置文件，配置文件可以在磁盘的任意位置。</li>
<li>AnnotationConfigApplicationContext<br>当使用注解配置容器对象时，需要使用此类来创建spring容器。它用来读取注解。</li>
</ol>
<h2 id="getBean-方法使用"><a href="#getBean-方法使用" class="headerlink" title="getBean()方法使用"></a>getBean()方法使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> object <span class="title">getBean</span> <span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    assertBeanFactoryActive() ;</span><br><span class="line">    &lt;!--例如：getBean(<span class="string">"UserService"</span>)--&gt;</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory() .getBean(name) ;</span><br></pre></td></tr></table></figure>
<p>此类方法时通过id获取，允许容器中有多个相同类型的对象。当容器中某一类型的对象只有一个时，才可以使用下面的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123; </span><br><span class="line">    assertBeanFactoryLstive() ;</span><br><span class="line">    &lt;!--例如：getBean(UserService<span class="class">.<span class="keyword">class</span>)--&gt;</span></span><br><span class="line"><span class="class">    <span class="title">return</span> <span class="title">getBeanFactory</span>().<span class="title">getBean</span>(<span class="title">requiredType</span>) </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring配置数据源（连接池）"><a href="#Spring配置数据源（连接池）" class="headerlink" title="Spring配置数据源（连接池）"></a>Spring配置数据源（连接池）</h1><h2 id="数据源（连接池）的作用"><a href="#数据源（连接池）的作用" class="headerlink" title="数据源（连接池）的作用"></a>数据源（连接池）的作用</h2><ul>
<li>数据源(连接池)是提高程序性能如出现的</li>
<li>事先实例化数据源，初始化部分连接资源</li>
<li>使用连接资源时从数据源中获取</li>
<li>使用完毕后将连接资源归还给数据源</li>
</ul>
<h1 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h1><h2 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a>原始注解</h2><table>
    <tr>
        <th>注解</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">@Component</td>
        <td  align="center">使用在类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Controller</td>
        <td  align="center">使用在web层类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Service</td>
        <td  align="center">使用在service层类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Repository</td>
        <td  align="center">使用在dao层类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Autowired</td>
        <td  align="center">使用在字段上用于根据类型依赖注入</td>
    </tr>
    <tr>
        <td  align="center">@Qualifier</td>
        <td  align="center">结合@Autowired-起使用用于根据名称进行依赖注入</td>
    </tr>
    <tr>
        <td  align="center">@Resource</td>
        <td  align="center">相当于@Autowired+@Qualifier,按照名称进行注入</td>
    </tr>
    <tr>
        <td  align="center">@Value</td>
        <td  align="center">注入普通属性</td>
    </tr>
    <tr>
        <td  align="center">@Scope</td>
        <td  align="center">标注Bean的作用范围</td>
    </tr>
    <tr>
        <td  align="center">@PostConstruct</td>
        <td  align="center">使用在方法上标注该方法是Bean的初始化方法</td>
    </tr>
    <tr>
        <td  align="center">@PreDestroy</td>
        <td  align="center">使用在方法 上标注该方法是Bean的销毁方法</td>
    </tr>
</table>
使用注解进行开发时，需要在applicationC ontext.xml中配置组件扫描,作用是指定哪个包及其子包下的Bean
需要进行扫描以便识别使用注解配置的类、字段和方法。
<--注解的组件扫描- >
> <context:component-scan base-package ="top.rainbowcat"></context:component-scan>

<p><strong>示例:</strong><br></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置组件扫描  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.rainbowcat"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)  <span class="comment">//配置注解</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)  <span class="comment">//设置作用域</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//按照类型注入可以省去@Qualifier("userDao")</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)  <span class="comment">//按照id值去匹配,要结合@Autowired使用</span></span><br><span class="line">    <span class="comment">//@Resource(name="userDao"),相当于@Autowired + @Qualifier("userDao")</span></span><br><span class="line">    <span class="comment">//在使用注解进行注入时,set方法可以省去</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用注解注入普通数据,可以从容器中获取键值对的数据进行注入:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(driver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h2><p>使用上面的注解还不能全部替代xml配置文件,还需要使用注解替代的配置如下: </p>
<ul>
<li>非自定义的Bean的配置: <code>&lt;bean&gt;</code></li>
<li>加载properties文件的配置: <code>&lt;context:property-placeholder&gt;</code></li>
<li>组件扫描的配置: <code>&lt;context:component-scan&gt;</code></li>
<li>引入其他文件: <code>&lt;import&gt;</code></li>
</ul>
<table>
    <tr>
        <th>注解</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">@Configuration</td>
        <td  align="center">用于指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解</td>
    </tr>
    <tr>
        <td  align="center">@ComponentScan</td>
        <td  align="center">用于指定Spring在初始化容器时要扫描的包。<br>
            作用和在Spring的xml配置文件中的
            <context:component-scan base package= "top.rainbowcat"/>-样</td>
    </tr>
    <tr>
        <td  align="center">@Bean</td>
        <td  align="center">使用在方法上，标注将该方法的返回值存储到Spring容器中</td>
    </tr>
    <tr>
        <td  align="center">@PropertySource</td>
        <td  align="center">用于加载.properties文件中的配置</td>
    </tr>
    <tr>
        <td  align="center">@Import</td>
        <td  align="center">用于导入其他配置类</td>
    </tr>
</table>
**示例:**
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)  <span class="comment">//service的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring核心配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//&lt;!--  配置组件扫描  --&gt;</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package="top.rainbowcat"&gt;&lt;/context:component-scan&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"top.rainbowcat"</span>)  <span class="comment">//配置组件扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从配置文件加载</span></span><br><span class="line"><span class="comment">//&lt;context:property-placeholder location="classpath:jdbc.properties"&gt;&lt;/context:property-placeholder&gt;</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSoueceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.drive&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)  <span class="comment">//对方法添加注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring集成Junit"><a href="#Spring集成Junit" class="headerlink" title="Spring集成Junit"></a>Spring集成Junit</h2><p>让SpringJunit负责创建Spring容器,但是需要将配置文件的名称告诉它。<br><br>将需要进行测试Bean直接在测试类中进行注入。</p>
<h4 id="Spring集成Junit的步骤"><a href="#Spring集成Junit的步骤" class="headerlink" title="Spring集成Junit的步骤"></a>Spring集成Junit的步骤</h4><ul>
<li>导入spring集成Junit的坐标</li>
<li>使用@Runwi th注解替换原来的运行期</li>
<li>使用@ContextConfiguration指定配置文件或配置类</li>
<li>使用@Autowi red注入需要测试的对象</li>
<li>创建测试方法进行测试</li>
</ul>
<p><strong>pom.xml导入Junit坐标:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将测试类中的代码进行修改:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定测试内核</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//指定配置文件</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= &#123;SpringConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">DataSourceConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要测试哪个,直接注入即可</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring的AOP"><a href="#Spring的AOP" class="headerlink" title="Spring的AOP"></a>Spring的AOP</h1><h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p>AOP为Aspect Oriented Programming的缩写,意思为面向切面编程,是通过预编译方式和运行期动态代理实现程序功能的统-维护的一种技术。<br><br>AOP是OOP（面向对象编程）的延续,是软件开发中的一个热点,也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离,从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br></p>
<h2 id="AOP的作用及其优势"><a href="#AOP的作用及其优势" class="headerlink" title="AOP的作用及其优势"></a>AOP的作用及其优势</h2><ul>
<li>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强。</li>
<li>优势：减少代码复用，提高开发效率，并且便于维护。</li>
</ul>
<h2 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h2><p>实际上，AOP的底层是通过Spring提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ol>
<li>动态代理有什么作用及应用场景?<ul>
<li>日志集中打印</li>
<li>事务</li>
<li>权限管理</li>
<li>AOP</li>
</ul>
</li>
</ol>
<p>2.在Spring Aop当中可以哪些方式实现，及区别?<br>    - java Proxy(动态构建字节码)(动态构建全新字节码bean初始化的时候)<br>    - cglib(动态构建字节码)(动态构建全新字节码bean初始化的时候)<br>    - Aspectj(修改目标类的字节，织入代理的字节，在程序编译(编译的时候插入动态代理的字节码，不会生成全新的Class)<br>    - instrumentation (修改目标类的字节码、类装载的时候动态拦截去修改,基于javaagent)javaagent:spring-instrument-4.3.8.RELEASE.jar(类装载的时候插入动态代理的字节码，不会生成全新的Class)</p>
<p>以上几种都是对JVM字节码进行操作，但操作方式又有不同。前两种是新增一个完整的Class字节码（必须要用到反射），而后两种是修改现有类的字节码（不需要使用反射）。</p>
<p>静态代理的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*目标对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Rainbow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*没有接口，使用cglib的方式（代理对象）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class RainbowProxy extends <span class="title">Rainbow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rainbow target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//插入代理的前置逻辑</span></span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//需要增强的目标对象的方法</span></span><br><span class="line">    target.sayHello();</span><br><span class="line">    <span class="comment">//插入代理的后置逻辑</span></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(end-begin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基于jdk的动态代理的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的实现类</span></span><br><span class="line"><span class="comment"> * 目标对象(也即是需要被增强的)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增强方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置增强逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Target target = <span class="keyword">new</span> Target();<span class="comment">//目标对象</span></span><br><span class="line">        <span class="keyword">final</span> Advice advice = <span class="keyword">new</span> Advice();<span class="comment">//获得增强方法的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收动态生成的代理对象，要用接口对象接收（目标对象与代理对象属于同级，故需要用其共同接口接收）</span></span><br><span class="line">        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),  <span class="comment">//目标对象的类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">//目标对象相同的接口字节码对象数组</span></span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;           <span class="comment">//调用代理对象的任何方法，实质上执行的都是invoke方法</span></span><br><span class="line">        <span class="comment">//TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(ProxyTest.class.getClassLoader(), new Class[]&#123;TargetInterface.class&#125;, new InvocationHandler() &#123;</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        advice.before();<span class="comment">//前置增强</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> method.invoke(target, args);<span class="comment">//target：目标方法，args：实际参数</span></span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            advice.after();<span class="comment">//后置增强</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">//调用代理对象的方法</span></span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基于cglib的动态代理的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增强方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置增强逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Target target = <span class="keyword">new</span> Target();<span class="comment">//目标对象</span></span><br><span class="line">        <span class="keyword">final</span> Advice advice = <span class="keyword">new</span> Advice();<span class="comment">//获得增强方法的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回值 就是动态生成的代理对象  基于cglib</span></span><br><span class="line">        <span class="comment">//1、创建增强器</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2、创建父类（目标类）</span></span><br><span class="line">        enhancer.setSuperclass(Target<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//3、设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                advice.before();<span class="comment">//前置增强</span></span><br><span class="line">                Object invoke = method.invoke(target, args);</span><br><span class="line">                advice.after();<span class="comment">//后置增强</span></span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//4、生成代理对象</span></span><br><span class="line">        Target proxy = (Target) enhancer.create();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="常用的AOP动态代理技术"><a href="#常用的AOP动态代理技术" class="headerlink" title="常用的AOP动态代理技术"></a>常用的AOP动态代理技术</h2><ul>
<li><strong>JDK代理</strong>:基于接口的动态代理技术。目标对象（需要增强的对象）和动态代理（运行时内存中生产的）实现同一个接口。</li>
<li><strong>cglib代理</strong>:基于父类的动态代理技术</li>
</ul>
<h2 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h2><ul>
<li>Target（目标对象）：代理的目标的对象</li>
<li>Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类</li>
<li>JoinPoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法, 因为spring只支持方法类型的连接点</li>
<li>Pointcut（切入点）：所谓切入点是指我们要对哪些JoinPoint进行拦截的定义（连接点中要被增强的部分）</li>
<li>Advice（通知/增强）：所谓通知是指拦截到JoinPoint之后所要做的事情就是通知</li>
<li>Aspect（切面）：是切点和通知（引介）的结合</li>
<li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入,而Aspect采用编译期织入和类装载期织入（就是将切点跟通知/增强结合的过程）</li>
</ul>
<h2 id="AOP开发明确的事项"><a href="#AOP开发明确的事项" class="headerlink" title="AOP开发明确的事项"></a>AOP开发明确的事项</h2><ol>
<li><p>需要编写的内容</p>
<ul>
<li>编写核心业务代码（目标类的目标方法）</li>
<li>编写切面类，切面类中有通知（增强功能方法）</li>
<li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li>
</ul>
</li>
<li><p>AOP技术实现的内容</p>
<p> Spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
</li>
<li><p>AOP底层使用哪种代理方式</p>
<p> 在spring中,框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>
</li>
</ol>
<h2 id="AOP配置方式"><a href="#AOP配置方式" class="headerlink" title="AOP配置方式"></a>AOP配置方式</h2><h4 id="xml方式进行配置"><a href="#xml方式进行配置" class="headerlink" title="xml方式进行配置"></a>xml方式进行配置</h4><ul>
<li>导入AOP相关坐标</li>
<li>创建目标接口和目标类(内部有切点)</li>
<li>创建切面类(内部有增强方法)</li>
<li>将目标类和切面类的对象创建权交给spring</li>
<li>在applicationContextxml中配置织入关系</li>
<li>测试代码</li>
</ul>
<ol>
<li>导入坐标（第三方的框架）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>切点表达式<ul>
<li>访问修饰符可以省略</li>
<li>返回值类型、包名、类名、方法名乐意用星号*代表任意</li>
<li>包名与类名之间一个点.代表当前包下的类，两个点.. 表示当前包及其子包下的类</li>
<li>参数列表可以使用两个点..表示任意个数，任意类型的参数列表（方法的参数）</li>
</ul>
</li>
</ol>
<blockquote>
<p>execution([修饰符]返回值类型包名.类名.方法名(参数))</p>
</blockquote>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--top.rainbowcat.aop包下的Target类中的save()无参、无返回值方法--&gt;</span></span><br><span class="line">execution(public void top.rainbowcat.aop.Target.save())</span><br><span class="line"><span class="comment">&lt;!--top.rainbowcat.aop包下的Target类中的任意无返回值的方法--&gt;</span></span><br><span class="line">execution(void top.rainbowcat.aop.Target.*(..))</span><br><span class="line"><span class="comment">&lt;!--top.rainbowcat.aop包下的任意类中的任意方法，返回值也不限--&gt;</span></span><br><span class="line">execution(* top.rainbowcat.aop.*.*(..))</span><br><span class="line"><span class="comment">&lt;!--top.rainbowcat.aop包及其子包下的任意类中的任意方法，返回值也不限--&gt;</span></span><br><span class="line">execution(* top.rainbowcat.aop..*.*(..))</span><br><span class="line"><span class="comment">&lt;!--任意包中任意类的任意方法--&gt;</span></span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>通知类型<br>通知的配置语法：<blockquote>
<p>&lt;aop:通知类型 method=”切面类中方法名” pointcut=”切面表达式”&gt;&lt;/aop:通知类型&gt;</p>
</blockquote>
</li>
</ol>
<table>
    <tr>
        <th>名称</th>
        <th>标签</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">前置通知</td>
        <td  align="center">aop:before</td>
        <td  align="center">用于配置前置通知。指定增强的方法在切入点方法之前执行</td>
    </tr>
    <tr>
        <td  align="center">后置通知</td>
        <td  align="center">aop:after-returning</td>
        <td  align="center">用于配置后置通知。指定增强的方法在切入点方法之后执行</td>
    </tr>
    <tr>
        <td  align="center">环绕通知</td>
        <td  align="center">aop:around</td>
        <td  align="center">用于配置环绕通知。指定增强的方法在切入点方法之前和之后都</td>
    </tr>
    <tr>
        <td  align="center">异常抛出通知</td>
        <td  align="center">aop:throwing</td>
        <td  align="center">用于配置异常抛出通知。指定增强的方法在出现异常时执行</td>
    </tr>
    <tr>
        <td  align="center">最终通知</td>
        <td  align="center">aop:after</td>
        <td  align="center">用于配置最终通知。无论增强方式执行是否有异常都会执行</td>
    </tr>
</table>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的实现类</span></span><br><span class="line"><span class="comment"> * 目标对象(也即是需要被增强的)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;<span class="comment">//用于测试异常抛出</span></span><br><span class="line">        System.out.println(<span class="string">"save running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置增强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置增强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕增强方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp 正在执行的连接点（切点）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前增强..."</span>);</span><br><span class="line">        <span class="comment">//切点方法</span></span><br><span class="line">        Object proceed = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后增强..."</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常抛出增强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常抛出增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终增强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        target.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.aop.Target"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.aop.MyAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置织入、告诉spring需要增强的方法和增强功能，首先要引入AOP命名空间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--声明切面：切点 + 通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span><span class="comment">&lt;!--只有在此配置了，切面才能被spring容器获取到--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--aop:后面的参数是通知，method当中的是切面类中方法的名字--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void top.rainbowcat.aop.Target.save())"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>切点表达式的抽取<br>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用pointcut-ref属性代替pointcut属性来引用抽取后的切点表达式。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--抽取切点表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* top.rainbowcat.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面：切点 + 通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span><span class="comment">&lt;!--只有在此配置了，切面才能被spring容器获取到--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--aop:后面的参数是通知，method当中的是切面类中方法的名字--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h4><ol>
<li>开发步骤</li>
</ol>
<ul>
<li>创建目标接口和目标类(内部有切点)</li>
<li>创建切面类(内部有增强方法)</li>
<li>将目标类和切面类的对象创建权交给spring</li>
<li>在切面类中使用注解配置织入关系</li>
<li>在配置文件中开启组件扫描和AOP的自动代理</li>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"target"</span>)  <span class="comment">//添加目标类注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myAspect"</span>)  <span class="comment">//添加切面类注解</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//标注myAspect是切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* top.rainbowcat.aop.*.*(..))"</span>)<span class="comment">//通知类型及切点表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")//在配置文件中要设置：组件扫描、AOP自动代理</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        target.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置组件扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.rainbowcat"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置AOP自动代理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>注解通知的类型<br>通知的配置语法：<blockquote>
<p>@通知注解(“切点表达式”)</p>
</blockquote>
</li>
</ol>
<table>
    <tr>
        <th>名称</th>
        <th>标签</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">前置通知</td>
        <td  align="center">@Before</td>
        <td  align="center">用于配置前置通知。指定增强的方法在切入点方法之前执行</td>
    </tr>
    <tr>
        <td  align="center">后置通知</td>
        <td  align="center">AfterReturning</td>
        <td  align="center">用于配置后置通知。指定增强的方法在切入点方法之后执行</td>
    </tr>
    <tr>
        <td  align="center">环绕通知</td>
        <td  align="center">@Around</td>
        <td  align="center">用于配置环绕通知。指定增强的方法在切入点方法之前和之后都</td>
    </tr>
    <tr>
        <td  align="center">异常抛出通知</td>
        <td  align="center">@AfterThrowing</td>
        <td  align="center">用于配置异常抛出通知。指定增强的方法在出现异常时执行</td>
    </tr>
    <tr>
        <td  align="center">最终通知</td>
        <td  align="center">@After</td>
        <td  align="center">用于配置最终通知。无论增强方式执行是否有异常都会执行</td>
    </tr>
</table>

<ol start="3">
<li>切点表达式抽取<br>同xml配置aop一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法,在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。<br><br>具体如下:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myAspect"</span>)  <span class="comment">//添加切面类注解</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//标注myAspect是切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* top.rainbowcat.aop.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)<span class="comment">//引用方式一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"MyAspect.pointcut()"</span>)<span class="comment">//引用方式二</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="Spring-JdbcTemplate基本使用"><a href="#Spring-JdbcTemplate基本使用" class="headerlink" title="Spring JdbcTemplate基本使用"></a>Spring JdbcTemplate基本使用</h1><h2 id="JdbcTemplate概述"><a href="#JdbcTemplate概述" class="headerlink" title="JdbcTemplate概述"></a>JdbcTemplate概述</h2><p>它是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。例如:操作关系型数据的JdbcTemplate和ibernateTemplate,操作nosq|数据库的RedisTemplate,操作消息队列的Jms Template等等。</p>
<h2 id="JdbcTemplate开发步骤"><a href="#JdbcTemplate开发步骤" class="headerlink" title="JdbcTemplate开发步骤"></a>JdbcTemplate开发步骤</h2><ul>
<li>导入spring-jdbc和spring-tx坐标</li>
<li>创建数据库表和实体</li>
<li>创建JdbcTemplate对象</li>
<li>执行数据库操作</li>
</ul>
<p>首先要导入相应坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xml配置方式，测试JdbcTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不使用容器,直接创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源对象</span></span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///rainbowcat?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF8&amp;serverTimezone=GMT&amp;allowPublicKeyRetrieval=true"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"dong123"</span>);</span><br><span class="line"></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//在使用前须设置数据源</span></span><br><span class="line">        template.setDataSource(dataSource);</span><br><span class="line">        String sql = <span class="string">"select * from userinfo"</span>;</span><br><span class="line">        List&lt;UserInfo&gt; infos = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(infos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *使用spring容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        JdbcTemplate template = app.getBean(JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String sql = <span class="string">"select * from userinfo"</span>;</span><br><span class="line">        List&lt;UserInfo&gt; infos = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(infos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置数据源对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.drive&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"template"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用注解进行测试，以及CRUD使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        template.update(<span class="string">"insert into userinfo value (?, ?, ?, ?, ?, ?, ?)"</span>, <span class="string">"admin"</span>, <span class="string">"123"</span>, <span class="string">"管理员"</span>, <span class="string">"男"</span>, <span class="string">"admin"</span>, <span class="string">"12345678900"</span>, <span class="string">"admin@qq.com"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        template.update(<span class="string">"update userinfo set email = ? where username = ?"</span>, <span class="string">"1029322685@qq.com"</span>, <span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        template.update(<span class="string">"delete  from userinfo where username = ?"</span>, <span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;UserInfo&gt; infos = template.query(<span class="string">"select * from userinfo"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(infos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserInfo userInfo = template.queryForObject("select * from userinfo where username = ?", new BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo.class), "root");</span><br><span class="line">        System.out.println(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Integer count = template.queryForObject(<span class="string">"select count(*) from userinfo"</span>, Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring的事务控制"><a href="#Spring的事务控制" class="headerlink" title="Spring的事务控制"></a>Spring的事务控制</h1><h2 id="编程式事务控制"><a href="#编程式事务控制" class="headerlink" title="编程式事务控制"></a>编程式事务控制</h2><ol>
<li>PlatformTransactionManager<br>PlatformTransactionManager接口是spring的事务管理器，它里面提供了我们常用的操作事务的方法。<table>
 <tr>
     <th>方法</th>
     <th>说明</th>
 </tr>
 <tr>
     <td  align="center">TransactionStatus getTransaction (TransactionDefinition definition)</td>
     <td  align="center">获取事务的状态信息</td>
 </tr>
 <tr>
     <td  align="center">void commit (TransactionStatus status)</td>
     <td  align="center">提交事务</td>
 </tr>
 <tr>
     <td  align="center">void rollback (TransactionStatus status)</td>
     <td  align="center">回滚事务</td>
 </tr>
</table>

</li>
</ol>
<p><strong>注意：</strong><br>PlatformTransactionManager是接口类型，不同的Dao层技术则有不同的实现类例如: </p>
<ul>
<li>Dao 层技术是jdbc或mybatis时: org.springframework.jdbc.datasource.DataSourceTransactionManager。</li>
<li>Dao层技术是hibernate时: org.springframework.orm.hibernate5.HibernateTransactionManager。</li>
</ul>
<ol start="2">
<li><p>TransactionDefinition<br>TransactionDefinition是事务的定义信息对象，里面有如下方法:</p>
<table>
 <tr>
     <th>方法</th>
     <th>说明</th>
     <th></th>
 </tr>
 <tr>
     <td>int getIsolationLevel ()</td>
     <td  align="center">获得事务的隔离级别<br>（设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。）</td>
     <td  align="center">
         ISOLATION_DEFAULT：默认的<br>
         ISOLATION_READ_ UNCOMMITTED：哪种都不能解决<br>
         ISOLATION_READ_COMMITTED：解决脏读<br>
         ISOLATION_REPEATABLE_READ：解决不可重复读<br>
         ISOLATION_SERIALIZABLE：全都能解决（性能较低）<br>
     </td>
 </tr>
 <tr>
     <td>int getPropagationBehavior ()</td>
     <td  align="center">获得事务的传播行为<br>（解决业务方法调用业务方法时，事务同一性问题）</td>
     <td  align="center"></td>
 </tr>
 <tr>
     <td>int getTimeout ()</td>
     <td  align="center">获得超时时间</td>
     <td  align="center">
         REQUIRED:如果当前没有事务，就新建-个事务，如果已经存在一个事务中，加入到这个事务中。-般的选择(默认值)。<br>
         SUPPORTS:支持当前事务,如果当前没有事务,就以非事务方式执行(没有事务)。<br>
         MANDATORY:使用当前的事务，如果当前没有事务，就抛出异常。<br>
         REQUERS_NEW:新建事务，如果当前在事务中，把当前事务挂起。<br>
         NOT_SUPPORTED:以非事务方式执行操作,如果当前存在事务，就把当前事务挂起。<br>
         NEVER:以非事务方式运行，如果当前存在事务，抛出异常。<br>
         NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务,则执行REQUIRED类似的操作。<br>
         超时时间：默认值是-1,没有超时限制。如果有，以秒为单位进行设置。<br>
         是否只读：建议查询时设置为只读。<br>
     </td>
 </tr>
 <tr>
     <td>boolean isReadonly ()</td>
     <td  align="center">是否只读</td>
     <td  align="center"></td>
 </tr>
</table>
</li>
<li><p>TransactionStatus<br>TransactionStatus接口提供的是事务具体的运行状态，方法介绍如下。</p>
<table>
 <tr>
     <th>方法</th>
     <th>说明</th>
 </tr>
 <tr>
     <td>boolean hasSavepoint()</td>
     <td  align="center">是否存储回滚点</td>
 </tr>
 <tr>
     <td>boolean isCompleted()</td>
     <td  align="center">事务是否完成</td>
 </tr>
 <tr>
     <td>boolean isNewTransaction ()</td>
     <td  align="center">是否是新事务</td>
 </tr>
 <tr>
     <td>boolean isRollbackOnly ()</td>
     <td  align="center">事务是否回滚</td>
 </tr>
</table>

</li>
</ol>
<h2 id="声明式事务控制"><a href="#声明式事务控制" class="headerlink" title="声明式事务控制"></a>声明式事务控制</h2><p>Spring的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明,用在Spring配置文件中声明式的处理事务来代替代码式的处理事务。<br><br><strong>声明式事务处理的作用：</strong></p>
<ul>
<li>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务,而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可。</li>
<li>在不需要事务管理的时候,只要在设定文件上修改一下,即可移去事务管理服务,无需改变代码重新编译，这样维护起来极其方便</li>
</ul>
<p><strong>注意:</strong> Spring声明式事务控制底层就是AOP。</p>
<h4 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h4><p>需要明确以下几点：</p>
<ul>
<li>谁是切点</li>
<li>谁是通知</li>
<li>配置切面</li>
</ul>
<p>声明式事务控制的配置要点：</p>
<ul>
<li>平台事务管理器配置</li>
<li>事务通知的配置</li>
<li>事务aop织入的配置</li>
</ul>
<p>切点方法的事务参数配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，&lt;tx:method&gt;代表切点方法的事务参数的配置,例如:<br><br>&lt;tx:method name=”transfer” isolation=”DEFAULT” propagation=”REQUIRED” timeout=”-1” read-only=”false”/&gt;</p>
<ul>
<li>name：切点方法名</li>
<li>isolation：事务的隔离级别</li>
<li>propagation：事务的传播行为</li>
<li>timeout：超时时间</li>
<li>read-only：是否只读</li>
</ul>
<p>示例（转账，基于XML实现）：<br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dao层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemplate</span><span class="params">(JdbcTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outMan, Double money)</span> </span>&#123;</span><br><span class="line">        template.update(<span class="string">"update account set money = money-? where name = ?"</span>, money, outMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inMan, Double money)</span> </span>&#123;</span><br><span class="line">        template.update(<span class="string">"update account set money = money+? where name = ?"</span>, money, inMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*目标对象，包含切点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImp</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, Double money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(outMan, money);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;  <span class="comment">//用于测试事务是否起作用</span></span><br><span class="line">        accountDao.in(inMan, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*模拟前端逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        AccountService accountService = app.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        accountService.transfer(<span class="string">"admin"</span>, <span class="string">"tom"</span>, <span class="number">200.00</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--加载外部配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据源对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.drive&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"template"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下面是事务相关配置--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"template"</span> <span class="attr">ref</span>=<span class="string">"template"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--目标对象 内部的方法即是切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"top.rainbowcat.service.Impl.AccountServiceImp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--事务是通过connection起作用，connection是从datasource获取的--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知 事务的增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置事务属性的参数信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--name：需要被增强的切点，这里可以配置多个事务并且可分别设置参数--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"-1"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的AOP织入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* top.rainbowcat.service.Impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h4><p>除了对相应的bean添加注解，还需要在要执行事务的方法当中进行配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImp</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  此处的配置相当于  &lt;tx:method name="transfer" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/&gt;</span></span><br><span class="line">    <span class="comment">//  也可配置到类名的上方，相当于  &lt;tx:method name="*"/&gt;</span></span><br><span class="line">    <span class="comment">//  还需要在xml当中配置注解驱动</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, Double money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(outMan, money);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;  <span class="comment">//用于测试事务是否起作用</span></span><br><span class="line">        accountDao.in(inMan, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML配置文件当中，必须要添加注解驱动才能完成事务的控制！！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.rainbowcat"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--加载外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置数据源对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.drive&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"template"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下面是事务相关配置--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务是通过connection起作用，connection是从datasource获取的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注解配置声明式事务控制解析<ul>
<li>使用@Transactional在需要进行事务控制的类或是方法上修饰,注解可用的属性同xml配置方式，例如隔离级别、传播行为等。</li>
<li>注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</li>
<li>使用在方法上,不同的方法可以采用不同的事务参数配置。</li>
<li>Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven /&gt;</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven使用tomcat8插件</title>
    <url>/2020/07/24/Maven%E4%BD%BF%E7%94%A8tomcat8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>在pom.xml当中需要做以下配置：</p>
<ol>
<li>配置tomcat8-maven-plugin</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat8-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0-r1655215<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!-- 通过maven tomcat8:run运行项目时，访问项目的端口号 --&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!-- 项目访问路径  本例：localhost:9090,  如果配置的aa， 则访问路径为localhost:9090/aa--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/travel<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>2.配置tomcat8.x的仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Tomcat8仓库--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>alfresco-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>alfresco-public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/groups/public-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这个google的用不了--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;pluginRepository&gt;</span></span><br><span class="line"><span class="comment">         &lt;id&gt;beardedgeeks-releases&lt;/id&gt;</span></span><br><span class="line"><span class="comment">         &lt;url&gt;http://beardedgeeks.googlecode.com/svn/repository/releases&lt;/url&gt;</span></span><br><span class="line"><span class="comment">     &lt;/pluginRepository&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>如何使用maven进行开发</title>
    <url>/2020/07/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8maven%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="什么是maven"><a href="#什么是maven" class="headerlink" title="什么是maven"></a>什么是maven</h2><ol>
<li>Maven简介<br>Maven是项目进行模型抽象，充分运用面向对象思想，通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven除了以程序构建能力为特色之外，还提供高级项目管理工具。<br><br>下载地址：<a href="http://archive.apache.org/dist/maven/maven-3/" target="_blank" rel="noopener">http://archive.apache.org/dist/maven/maven-3/</a></li>
</ol>
<a id="more"></a>

<ol start="2">
<li>Maven的主要作用<ul>
<li>对第三方jar包的统一管理。意思其实就是通过本地仓库或者是远程仓库更或者是中央仓库进行依赖管理，省去了导入jar包的操作。不过一般我们在配置Maven时会选择阿里的远程仓库，不会去连接中央仓库，因为太慢了，而且阿里不仅拥有中央仓库的所有jar包而且开源了自身许多有用的jar包，如数据库连接池jar包Druid(德鲁伊)。</li>
<li>将项目分模块构建，提高开发效率。意思就是说使用Maven时，其构建项目时，会将包分好，方便工作人员协同开发，提高效率。</li>
<li>Maven提供一套对项目生命周期管理的标准。意思是说，Maven为项目提供了许多有关jar包的作用域，作用范围，类的生命周期，运行范围。以及项目的编译，部署等都提供了很好的接口，只要配置下就好了。减少了开发人员思考这些无关紧要的东西，只要遵循Maven的标准就可以了。</li>
</ul>
</li>
</ol>
<h4 id="maven项目标准目录结构"><a href="#maven项目标准目录结构" class="headerlink" title="maven项目标准目录结构"></a>maven项目标准目录结构</h4><p>maven项目标准目录结构<br>src/main/java目录 核心代码部分。<br>src/main/resources 配置文件部分。<br>src/test/java目录测试代码部分。<br>src/test/resources测试配置文件。<br>src/main/webapp页面资源，js, CSs,图片等等</p>
<h4 id="maven项目常用命令"><a href="#maven项目常用命令" class="headerlink" title="maven项目常用命令"></a>maven项目常用命令</h4><p>在项目的目录下：<br>mvn clean：清除项目编译文件<br>mvn compile：将src/main下的文件进行编译<br>mvn test：将src/main、src/test下的文件进行编译<br>mvn package：对项目进行打包<br>mvn install：执行除了clean以外的操作，同时还将项目安装到本地仓库<br>mvn deploy：发布项目</p>
<h4 id="maven生命周期"><a href="#maven生命周期" class="headerlink" title="maven生命周期"></a>maven生命周期</h4><table>
  <tr>
    <th align=center>清除编译信息</th>
    <th align=center>编译</th>
    <th align=center>测试</th>
    <th align=center>打包</th>
    <th align=center>安装</th>
    <th align=center>发布</th>
    <td rowspan="2"></td>
  </tr>
  <tr>
    <td align=center>clean</td>
    <td align=center>compile</td>
    <td align=center>test</td>
    <td align=center>package</td>
    <td align=center>install</td>
    <td></td>
  </tr>
  <tr>
    <td align=center>
      清理生命周期
    </td>
    <td colspan="5" align=center>
      默认生命周期
    </td>
    <td colspan="5" align=center>
      站点生命周期
    </td>
  </tr>
</table>
#### IDEA集成maven插件
IDEA主界面当中，点击configure-settings
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt; javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5&lt;&#x2F;version</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt; &#x2F;&#x2F;解决jar包冲突，只在编译的时候起作用，项目运行时不起作用（test：只在测试时有用）</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br></pre></td></tr></table></figure>
## 配置自己的maven骨架
阿里云镜像：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
  </entry>
  <entry>
    <title>Redis简单使用</title>
    <url>/2020/07/16/Redis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Redis简单了解"><a href="#Redis简单了解" class="headerlink" title="Redis简单了解"></a>Redis简单了解</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Redis是一款高性能的NOSQL系列的非关系型数据库。</p>
<p>1.1.什么是NOSQL<br>NoSQL(NoSQL = Not only SQL), 意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。<br>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从<br>心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL 数据库的产生就是为了解决大规模数据集<br>合多重数据种类带来的挑战，尤其是大数据应用难题。</p>
<a id="more"></a>

<p>1.1.1. NOSQL和关 系型数据库比较<br>优点:<br>1)成本: nosq1数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。<br>2)查询速度: nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosq1数据库。<br>3)存储数据的格式: nosql的存储格式是key ,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种<br>格式，而数据库则只支持基础类型。<br>4)扩展性:关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。<br>缺点:<br>1)维护的工具和资料有限，因为nosq1是属于新的技术，不能和关系型数据库10几年的技术同日而语。<br>2)不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户 的学习和使用成本。<br>3)不提供关系型数据库对事务的处理。<br>1.1.2.非关系型数据 库的优势:<br>1)性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。<br>2)可扩展性同样也是因为基于键值对，数据之间没有耦合性,所以非常容易水平扩展。<br>1.1.3.<br>关系型数据库的优势:<br>1)复杂查询可以用sQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。<br>2) 事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势,反之亦然。<br>1.1.4.<br>总结<br>关系型数据库与NoSQL数据库并非对立而是互补的关系,即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库,<br>让NoSQL数据库对关系型数据库的不足进行弥补。<br>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据。</p>
<p>1.2.主流的NOSQL产品<br>键值(Key-Value )存储数据库<br>    相关产品: Tokyo Cabinet/Tyrant、 Redis、 Voldemort、 Berkeley DB<br>    典型应用:内容缓存，主要用于处理大量数据的高访问负载。<br>    数据模型:一系列键值对<br>    优势:快速查询<br>    劣势:存储的数据缺少结构化<br>列存储数据库<br>    相关产品: Cassandra, HBase, Riak<br>    典型应用:分布式的文件系统<br>    数据模型:以列簇式存储,将同- -列数据存在一-起<br>    优势:查找速度快,可扩展性强，更容易进行分布式扩展<br>    劣势:功能相对局限<br>文档型数据库<br>    相关产品: CouchDB、MongoDB<br>    典型应用: Web应用(与Key-Value类似， Value是结构化的)<br>    数据模型: - 系列键值对<br>    优势:数据结构要求不严格<br>    劣势:查询性能不高， 而且缺乏统一的查询语法<br>图形(Graph)数据库<br>    相关数据库: Neo4J、InfoGrid、 Infinite Graph<br>    典型应用:社交网络<br>    数据模型:图结构<br>    优势:利用图结构相关算法。<br>    劣势:需要对整个图做计算才能得出结果，不容易做分布式的集群方案。<br>1.3什么是Redis<br>Redis是用C语言开发的一个开源的高性能键值对(key-value) 数据库，官方提供测试数据, 50个并发执行100000个请求,读的速度是110000次/s ,<br>写的速度是81000次/s，且Redis通过 提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下:<br>    1)字符串类型string<br>    2)哈希类型hash<br>    3)列表类型list<br>    4)集合类型set<br>    5)有序集合类型sortedset<br>1.3.1 redis的应用场景<br>    缓存(数据查询、短连接、新闻内容、商品内容等等)<br>    聊天室的在线好友列表<br>    任务队列。(秒杀、 抢购、12306等等)<br>    应用排行榜<br>    网站访问统计<br>    数据过期处理(可以精确到毫秒<br>    分布式集群架构中的session分离</p>
<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>官网：<a href="https://www.redis.io/" target="_blank" rel="noopener">https://www.redis.io/</a><br>中文网站：<a href="https://www.redis.net.cn/" target="_blank" rel="noopener">https://www.redis.net.cn/</a><br>windows下载地址（微软的GitHub地址）：<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a></p>
<p>下载完直接解压即可，无需安装。<br>    - redis.windows.conf :配置文件<br>    - redis-cli.exe : redis的客户端<br>    - redis-server.exe : redis服务器端</p>
<h4 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h4><p><strong>redis的数据结构：</strong><br>redis存储的是: key, value格式的数据，其中key都是字符串，value有5种不同的数据结构。</p>
<h6 id="字符串类型string"><a href="#字符串类型string" class="headerlink" title="字符串类型string"></a>字符串类型string</h6><ol>
<li>存储：set key value</li>
<li>获取：get  key</li>
<li>删除：del key</li>
</ol>
<blockquote>
<p>set username lisi<br>get username<br>del username</p>
</blockquote>
<h6 id="哈希类型hash（map格式）"><a href="#哈希类型hash（map格式）" class="headerlink" title="哈希类型hash（map格式）"></a>哈希类型hash（map格式）</h6><ol>
<li>存储：hset key filed value</li>
<li>获取：hget  key filed（获取指定filed的值）、hgetall key（获取key的所有值）</li>
<li>删除：hdel key filed</li>
</ol>
<blockquote>
<p>hset user username lisi<br>hset user password 123<br>hget user username<br>hdel user username  //删除键（username）和对应的值<br>hgetall user  //获取键的所有值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;lisi&quot;</span><br><span class="line">3) &quot;password&quot;</span><br><span class="line">4) &quot;123&quot;</span><br></pre></td></tr></table></figure>

<h6 id="列表类型list（linkedlist格式）"><a href="#列表类型list（linkedlist格式）" class="headerlink" title="列表类型list（linkedlist格式）"></a>列表类型list（linkedlist格式）</h6><p>可以添加一个元素到列表的头部(左边)或者尾部(右边)</p>
<ol>
<li>存储：<ul>
<li>lpush key value（将元素添加到列表头部/左侧）</li>
<li>rpush key value（将元素添加到列表尾部/右侧）</li>
</ul>
</li>
<li>获取：<ul>
<li>lrange  key start end（范围获取）</li>
</ul>
</li>
<li>删除：<ul>
<li>lpop key（删除列表头部元素，并将元素返回）</li>
<li>rpop key（删除列表尾部元素，并将元素返回）</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH mylist aaa bbb ccc</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 2</span><br><span class="line">1) &quot;ccc&quot;</span><br><span class="line">2) &quot;bbb&quot;</span><br><span class="line">3) &quot;aaa&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop mylist</span><br><span class="line">&quot;ccc&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 2</span><br><span class="line">1) &quot;bbb&quot;</span><br><span class="line">2) &quot;aaa&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpush mylist aaa bbb</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;bbb&quot;</span><br><span class="line">2) &quot;aaa&quot;</span><br><span class="line">3) &quot;bbb&quot;</span><br><span class="line">4) &quot;aaa&quot;</span><br></pre></td></tr></table></figure>

<h6 id="集合类型set（不允许重复元素）"><a href="#集合类型set（不允许重复元素）" class="headerlink" title="集合类型set（不允许重复元素）"></a>集合类型set（不允许重复元素）</h6><ol>
<li>存储：sadd key value</li>
<li>获取：smembers key（获取set集合中所有元素）</li>
<li>删除：srem key value（删除set集合中的某个元素）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt;  sadd myset a b c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; sadd myset a</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; sadd myset d e</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;e&quot;</span><br><span class="line">127.0.0.1:6379&gt; srem myset a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;e&quot;</span><br></pre></td></tr></table></figure>
<h6 id="有序集合类型sortedset（不允许重复元素，且元素有序）"><a href="#有序集合类型sortedset（不允许重复元素，且元素有序）" class="headerlink" title="有序集合类型sortedset（不允许重复元素，且元素有序）"></a>有序集合类型sortedset（不允许重复元素，且元素有序）</h6><ol>
<li>存储：zadd key score value</li>
<li>获取：zrange key start end</li>
<li>删除：zrem key value</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd mysort 12 zhang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mysort 20 li</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mysort 9 zhao</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1</span><br><span class="line">1) &quot;zhao&quot;</span><br><span class="line">2) &quot;zhang&quot;</span><br><span class="line">3) &quot;li&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1 withscores</span><br><span class="line">1) &quot;zhao&quot;</span><br><span class="line">2) &quot;9&quot;</span><br><span class="line">3) &quot;zhang&quot;</span><br><span class="line">4) &quot;12&quot;</span><br><span class="line">5) &quot;li&quot;</span><br><span class="line">6) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrem mysort zhang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1 withscores</span><br><span class="line">1) &quot;zhao&quot;</span><br><span class="line">2) &quot;9&quot;</span><br><span class="line">3) &quot;li&quot;</span><br><span class="line">4) &quot;20&quot;</span><br></pre></td></tr></table></figure>
<h6 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h6><ol>
<li>kyes * ：查询所有的键</li>
<li>type key ：获取键对应的value类型</li>
<li>del key ：删除指定key的key value</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;myset&quot;</span><br><span class="line">2) &quot;user&quot;</span><br><span class="line">3) &quot;mylist&quot;</span><br><span class="line">4) &quot;mysort&quot;</span><br><span class="line">127.0.0.1:6379&gt; type user</span><br><span class="line">hash</span><br><span class="line">127.0.0.1:6379&gt; type mysort</span><br><span class="line">zset</span><br><span class="line">127.0.0.1:6379&gt; type mylist</span><br><span class="line">list</span><br><span class="line">127.0.0.1:6379&gt; type myset</span><br><span class="line">set</span><br><span class="line">127.0.0.1:6379&gt; del user</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;myset&quot;</span><br><span class="line">2) &quot;mylist&quot;</span><br><span class="line">3) &quot;mysort&quot;</span><br></pre></td></tr></table></figure>
<h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>由于Redis是一个内存数据库，当redis服务器重启时数据会丢失，可以将redis内存中的数据持久化保存到硬盘中。<br><br>Redis持久化机制有两种：</p>
<ol>
<li>RDB：默认方式，不需要进行配置。在一定间隔时间中，检测key的变化情况，然后进行持久化数据。</li>
</ol>
<p><strong>编辑redis.windows.conf文件</strong><br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">after 900 sec (15 min) if at least 1 key changed&lt;br&gt;</span><br><span class="line">save 900 1&lt;br&gt;</span><br><span class="line">after 300 sec (5 min) if at least 10 keys changed&lt;br&gt;</span><br><span class="line">save 300 10&lt;br&gt;</span><br><span class="line">after 60 sec if at least 10000 keys changed&lt;br&gt;</span><br><span class="line">save 60 10000&lt;br&gt;</span><br></pre></td></tr></table></figure>

<p><strong>重启redis服务器，并指定配置文件名称</strong><br><br><code>D: \redis&gt;redis-server.exe redis.windows.conf</code></p>
<ol start="2">
<li>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后持久化数据。<br>编辑redis.windows.conf文件。找到”appendonly no”，改为”appendonly yes”,此时已开启AOF。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># appendfsync always  &#x2F;&#x2F;每次操作都进行持久化</span><br><span class="line">appendfsync everysec  &#x2F;&#x2F;每隔一秒进行一次持久化</span><br><span class="line"># appendfsync no      &#x2F;&#x2F;不进行持久化</span><br></pre></td></tr></table></figure>
<h4 id="Java客户端Jedis"><a href="#Java客户端Jedis" class="headerlink" title="Java客户端Jedis"></a>Java客户端Jedis</h4>一款java操作redis数据库的工具。<br><br>需要先导入相关jar包。<br><br>jedis的jar包下载地址：<br><br><a href="http://mvnrepository.com/artifact/redis.clients/jedis" target="_blank" rel="noopener">http://mvnrepository.com/artifact/redis.clients/jedis</a><br><br><a href="http://mvnrepository.com/artifact/org.apache.commons/commons-pool2" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.apache.commons/commons-pool2</a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单的使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    jedis.set(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Jedis操作各种Redis中的数据结构</li>
<li>字符串类型string<br>set、get<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    jedis.set(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"username"</span>));</span><br><span class="line">    <span class="comment">//可以使用setex()方法存储指定过期时间的key value</span></span><br><span class="line">    jedis.setex(<span class="string">"activecode"</span>, <span class="number">20</span>, <span class="string">"hello"</span>);<span class="comment">//将activecode: hehe键值对存入redis， 并且20秒后自动删除该键值对</span></span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>哈希类型hash : map格式<br>hset、hget<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    jedis.hset(<span class="string">"user"</span>, <span class="string">"name"</span>, <span class="string">"lisi"</span>);</span><br><span class="line">    jedis.hset(<span class="string">"user"</span>, <span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">    jedis.hset(<span class="string">"user"</span>, <span class="string">"address"</span>, <span class="string">"beijing"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    System.out.println(jedis.hget(<span class="string">"user"</span>, <span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">"user"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keySet)&#123;</span><br><span class="line">        String value = user.get(key);</span><br><span class="line">        System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>列表类型list : linkedlist格式。 支持重复元素<br>lpush/rpush 、lpop/rpop、lrange start end（范围获取）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    jedis.lpush(<span class="string">"myList"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">    jedis.rpush(<span class="string">"myList"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; myList = jedis.lrange(<span class="string">"myList"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(myList);</span><br><span class="line"></span><br><span class="line">    String element1 = jedis.lpop(<span class="string">"myList"</span>);</span><br><span class="line">    System.out.println(element1);</span><br><span class="line">    System.out.println(jedis.lrange(<span class="string">"myList"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    String element2 = jedis.rpop(<span class="string">"myList"</span>);</span><br><span class="line">    System.out.println(element2);</span><br><span class="line">    System.out.println(jedis.lrange(<span class="string">"myList"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>集合类型set:不允许重复元素<br>sadd<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    jedis.sadd(<span class="string">"mySet"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; mySet = jedis.smembers(<span class="string">"mySet"</span>);</span><br><span class="line">    System.out.println(mySet);</span><br><span class="line"></span><br><span class="line">    jedis.srem(<span class="string">"mySet"</span>, <span class="string">"a"</span>);</span><br><span class="line">    System.out.println(jedis.smembers(<span class="string">"mySet"</span>));</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>有序集合类型sortedset :不允许重复元素，且元素有顺序<br>zadd<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    jedis.zadd(<span class="string">"sortSet"</span>, <span class="number">3</span>, <span class="string">"小张"</span>);</span><br><span class="line">    jedis.zadd(<span class="string">"sortSet"</span>, <span class="number">5</span>, <span class="string">"小李"</span>);</span><br><span class="line">    jedis.zadd(<span class="string">"sortSet"</span>, <span class="number">10</span>, <span class="string">"小王"</span>);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; sortSet = jedis.zrange(<span class="string">"sortSet"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(sortSet);</span><br><span class="line"></span><br><span class="line">    System.out.println(jedis.zrangeWithScores(<span class="string">"sortSet"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="Jedis连接池：JedisPool"><a href="#Jedis连接池：JedisPool" class="headerlink" title="Jedis连接池：JedisPool"></a>Jedis连接池：JedisPool</h6></li>
</ol>
<ul>
<li>创建JedisPool连接池对象</li>
<li>调用getResource()方法获取Jedis连接<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建配置对象</span></span><br><span class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建Jedis连接池对象，不设置配置参数会使用默认的</span></span><br><span class="line"><span class="comment">//        JedisPool jedisPool = new JedisPool();</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 获取连接</span></span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line">    <span class="comment">//3.操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 关闭，归还到连接池</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>一些常用的参数配置：</strong><br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#收大活动对象数</span><br><span class="line">redis . pool . maxTotal&#x3D;1000</span><br><span class="line">#最大能够保持idel状态的对象数</span><br><span class="line">redis. pool . maxIdle&#x3D;100</span><br><span class="line">#坡小能够保持idel状态的对象数</span><br><span class="line">redis. pool. minIdle&#x3D;50</span><br><span class="line">#当池内没有返回对象时，最大等待时间</span><br><span class="line">redis. pool . maxWaitMillis&#x3D;10000</span><br><span class="line">#当调用borrow Object方法时，是否进行有效性检查</span><br><span class="line">redis. pool. testOnBorrow true</span><br><span class="line">#当调用return object方法时，是否进行有效性检查</span><br><span class="line">redis. pool. testOnReturn&#x3D;true</span><br><span class="line">#“空闲链接&quot;检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.</span><br><span class="line">redis. pool. timeBetweenEvi ctionRunsMillis&#x3D;30000</span><br><span class="line">#向调用者输出“链接”对象时，是否检测它的空闲超时;</span><br><span class="line">redis. pool. testWhileIdle&#x3D;true</span><br><span class="line">#对于“空闲链接&quot;检测线程而言，每次检测的链接资源的个数。默认为3.</span><br><span class="line">redis . pool . numTestsPerEvictionRun&#x3D;50</span><br><span class="line">#redis服务器的IP</span><br><span class="line">redis. ip &#x3D;XXXXXX</span><br><span class="line">#redis服务器的Port</span><br><span class="line">redis1. port&#x3D; &#x3D;6379</span><br></pre></td></tr></table></figure>
<p><strong>连接池工具类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jedis工具类</span></span><br><span class="line"><span class="comment"> *      加载配置文件</span></span><br><span class="line"><span class="comment"> *      提供获取连接的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config, pro.getProperty(<span class="string">"host"</span>), Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>案例需求:<br></p>
<ol>
<li>提供index.html页面，页面中有一个省份下拉列表<br></li>
<li>当页面加载完成后发送ajax请求,加载所有省份<br><br>使用ieda调试程序时，刚开始报了个异常：java.lang.NoClassDefFoundError: org/slf4j/LoggerFactory<br><br>jar包下载链接<a href="https://repo1.maven.org/maven2/org/slf4j/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/org/slf4j/</a></li>
</ol>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.dao.ProvinceDao;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.domain.Province;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from province"</span>;</span><br><span class="line">        List&lt;Province&gt; provinces = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Province&gt;(Province<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span> provinces;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.dao.ProvinceDao;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.dao.impl.ProvinceDaoImpl;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.domain.Province;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.service.ProvinceService;</span><br><span class="line"><span class="keyword">import</span> top.rainbowcat.util.JedisPoolUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProvinceDao provinceDao = <span class="keyword">new</span> ProvinceDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> provinceDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Redis缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 先从redis中查询数据</span></span><br><span class="line">        Jedis jedis = JedisPoolUtils.getJedis();</span><br><span class="line">        String province_json = jedis.get(<span class="string">"province"</span>);</span><br><span class="line">        System.out.println(province_json);</span><br><span class="line">        <span class="keyword">if</span> (province_json == <span class="keyword">null</span> || province_json.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//redis中没有数据,从数据库中查询</span></span><br><span class="line">            System.out.println(<span class="string">"Redis中没有数据，正在进行数据库查询..."</span>);</span><br><span class="line">            List&lt;Province&gt; list = provinceDao.findAll();</span><br><span class="line">            <span class="comment">//将list集合序列化为json</span></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                province_json = mapper.writeValueAsString(list);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将json数据存入redis当中</span></span><br><span class="line">            jedis.set(<span class="string">"province"</span>, province_json);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//在redis中查询到数据</span></span><br><span class="line">            System.out.println(<span class="string">"Redis中有数据，正在查询缓存..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> province_json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/findProvince"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindProvinceServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法查询</span></span><br><span class="line">        ProvinceService service = <span class="keyword">new</span> ProvinceServiceImpl();</span><br><span class="line">        String json = service.findAllJson();</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;select id=<span class="string">"province"</span>&gt;</span><br><span class="line">    &lt;option&gt;--请选择省份--&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $.get(<span class="string">"findProvince"</span>, &#123;&#125;, function (d) &#123;</span><br><span class="line">            <span class="comment">//获取select</span></span><br><span class="line">            <span class="keyword">var</span> province = $(<span class="string">"#province"</span>);</span><br><span class="line">            <span class="comment">//遍历json数组</span></span><br><span class="line">            $(d).each(function () &#123;</span><br><span class="line">                <span class="comment">//创建option</span></span><br><span class="line">                <span class="keyword">var</span> option = <span class="string">"&lt;option name='"</span>+ <span class="keyword">this</span>.id +<span class="string">"'&gt;"</span>+ <span class="keyword">this</span>.name + <span class="string">"&lt;/option&gt;"</span>;</span><br><span class="line">                <span class="comment">//调用select的append方法进行追加</span></span><br><span class="line">                province.append(option);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>:使用redis缓存一些不经常发生变化的数据。</p>
<ul>
<li>数据库的数据一旦发生改变，则需要更新缓存。<ul>
<li>数据库的表执行增删改的相关操作，需要将redis缓存数据情况，再次存入</li>
<li>在service对应的增删改方法中，将redis数据删除。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>AJax &amp; JSON</title>
    <url>/2020/07/15/AJax%20&amp;%20JSON/</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="AJAX概念："><a href="#AJAX概念：" class="headerlink" title="AJAX概念："></a>AJAX概念：</h2><p>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，<strong>无需重新加载整个网页的情况下，能够更新部分网页的技术</strong>。</p>
<a id="more"></a>

<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h4 id="原生JS实现方式"><a href="#原生JS实现方式" class="headerlink" title="原生JS实现方式"></a>原生JS实现方式</h4><ol>
<li>$.ajax()</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"发送异步请求"</span> <span class="attr">onclick</span>=<span class="string">"fn()"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.创建核心对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xmlHttp;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//code for IE7+,Firefox,Chrome,Opera,Safari</span></span></span><br><span class="line"><span class="actionscript">            xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//code for IE6,IE5</span></span></span><br><span class="line"><span class="actionscript">            xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//2.建立连接</span></span></span><br><span class="line">        /**</span><br><span class="line"><span class="actionscript">         * xmlHttp.open(<span class="string">"GET"</span>, <span class="string">"test1.txt"</span>, <span class="literal">true</span>)</span></span><br><span class="line">         * 参数：</span><br><span class="line">         *      1.请求方式：GET、POST</span><br><span class="line">         *      2.请求的URL</span><br><span class="line"><span class="actionscript">         *      <span class="number">3.</span>同步或异步请求：<span class="literal">true</span>（异步）、<span class="literal">false</span>（同步）</span></span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        xmlHttp.open(<span class="string">"GET"</span>, <span class="string">"testServlet?name=张三"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//3.发送请求</span></span></span><br><span class="line">        /**</span><br><span class="line">         * 如果是GET请求：URL参数在open中拼接</span><br><span class="line">         * 如果是POST请求：URL在send中定义</span><br><span class="line">         */</span><br><span class="line">        xmlHttp.send();</span><br><span class="line"><span class="actionscript">        <span class="comment">//4.接收和处理响应结果(xmlHttp.responseText)</span></span></span><br><span class="line">        /**</span><br><span class="line">         * 当xmlHttp对象的 响应就绪状态改变时触发事件(onreadystatechange)</span><br><span class="line">         * onreadystatechange有以下几种状态</span><br><span class="line">         *      1. 0：请求未初始化</span><br><span class="line">         *      2. 1：服务器连接已建立</span><br><span class="line">         *      3. 2：请求已接收</span><br><span class="line">         *      4. 3：请求处理中</span><br><span class="line">         *      5. 4：请求已完成，且相应已完成</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            if (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取服务器的响应结果</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> responseText = xmlHttp.responseText;</span></span><br><span class="line">                alert(responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line">response.getWriter().write(<span class="string">"hello"</span> + name);</span><br></pre></td></tr></table></figure>
<h4 id="jQuery实现方式"><a href="#jQuery实现方式" class="headerlink" title="jQuery实现方式"></a>jQuery实现方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"testServlet"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            data: &#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>$.get() 和 $.post()</li>
</ol>
<ul>
<li>语法：$.get(url, [data], [callback], [type])</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.post(<span class="string">"testServlet"</span>, &#123;<span class="string">"name"</span>: <span class="string">"tom"</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;alert(d)&#125;, <span class="string">"text"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="JSON概念："><a href="#JSON概念：" class="headerlink" title="JSON概念："></a>JSON概念：</h2><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<br></p>
<h2 id="JSON语法："><a href="#JSON语法：" class="headerlink" title="JSON语法："></a>JSON语法：</h2><h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><ol>
<li>数据在键/值对中：json数据由键值对构成。<ul>
<li><strong>键</strong>用引号引起来，也可以不是用引号</li>
<li><strong>值</strong>的取值类型：<ol>
<li>数字（证书或浮点数）</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（true/false）</li>
<li>数组（在方括号中）{“persons”:[{},{}]}</li>
<li>对象（在花括号中）{“address”:{“province”:”陕西”…}}</li>
<li>null</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1. 基本格式</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2. 嵌套格式</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> b = [</span></span><br><span class="line"><span class="actionscript">    &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    &#123;<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>&#125;</span></span><br><span class="line">    ];</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> c = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="string">"person"</span>: [</span></span><br><span class="line"><span class="actionscript">            &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            &#123;<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>数据由都好分隔：多个键值对由逗号分隔。</li>
<li>花括号保存对象：使用{}定义json格式</li>
<li>方括号保存数组：[]</li>
</ol>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><ol>
<li>json对象.键名</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(a.name);//获取的结果是：张三</span><br><span class="line">console.log(a.age);//获取的结果是：20</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>json对象[“键名”]</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(a["name"])//获取的结果是：张三</span><br><span class="line">console.log(a["age"]);//获取的结果是：20</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>数组对象[索引]</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(c.person[1].name);//获取的结果是：李四</span><br><span class="line">console.log(c["person"][0].name);;//获取的结果是：张三</span><br></pre></td></tr></table></figure>
<h4 id="JSON的遍历"><a href="#JSON的遍历" class="headerlink" title="JSON的遍历"></a>JSON的遍历</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var a = &#123;"name": "张三", "age": 20, "address": "北京"&#125;;</span><br><span class="line"></span><br><span class="line">    for (var key in a) &#123;</span><br><span class="line">        console.log(key);//获取所有的键（字符串格式）</span><br><span class="line">        console.log(key + ":" + a[key]);//获取所有的键和值（字符串格式）</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var b = [</span><br><span class="line">            &#123;"name": "张三", "age": 20, "address": "北京"&#125;,</span><br><span class="line">            &#123;"name": "李四", "age": 20, "address": "北京"&#125;,</span><br><span class="line">            &#123;"name": "王五", "age": 20, "address": "北京"&#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i <span class="tag">&lt; <span class="attr">b.length</span>; <span class="attr">i</span>++) &#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">var</span> <span class="attr">c</span> = <span class="string">b[i];</span></span></span><br><span class="line"><span class="tag">        <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">key</span> <span class="attr">in</span> <span class="attr">c</span>) &#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">console.log</span>(<span class="attr">key</span>+ "<span class="attr">:</span>" + <span class="attr">c</span>[<span class="attr">key</span>])</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="JSON数据和Java对象的转换"><a href="#JSON数据和Java对象的转换" class="headerlink" title="JSON数据和Java对象的转换"></a>JSON数据和Java对象的转换</h4><p>一般使用json解析器进行。常见的有Jsonlib、Gjson、fastjson、jackson</p>
<h6 id="JSON转为Java对象"><a href="#JSON转为Java对象" class="headerlink" title="JSON转为Java对象"></a>JSON转为Java对象</h6><ol>
<li><p>使用步骤</p>
<ul>
<li>导入jackson的相关jar包</li>
<li>创建jackson核心对象ObjectMapper</li>
<li>调用ObjectMapper的相关方法进行转换</li>
</ul>
</li>
<li><p>转换方法<br>readValue(json字符串数据, class类型)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.初始化json字符串</span></span><br><span class="line">        String json = <span class="string">"&#123;\"name\":\"张三\",\"age\":20,\"address\":\"北京\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.转换</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Persion persion = mapper.readValue(json, Persion<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(persion);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h6 id="Java对象转为JSON"><a href="#Java对象转为JSON" class="headerlink" title="Java对象转为JSON"></a>Java对象转为JSON</h6><ol>
<li><p>使用步骤</p>
<ul>
<li>导入jackson的相关jar包</li>
<li>创建jackson核心对象ObjectMapper</li>
<li>调用ObjectMapper的相关方法进行转换</li>
</ul>
</li>
<li><p>转换方法</p>
<ul>
<li>writeValue(参数1, obj)：<ul>
<li>参数1：<ol>
<li>File 将obj对象转换为json字符串，并保存到指定文件中</li>
<li>Writer 将obj对象转换为json字符串，并将json数据填充到字符输出流</li>
<li>OutputStream obj对象转换为json字符串，并将json数据填充到字节输出流</li>
</ol>
</li>
</ul>
</li>
<li>writeValueAsString()：将对象转换为json字符串</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java转json</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建person对象</span></span><br><span class="line">        Persion person = <span class="keyword">new</span> Persion();</span><br><span class="line">        person.setName(<span class="string">"张三"</span>);</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        person.setAddress(<span class="string">"北京"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建jackson核心对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//3.转换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//mapper.writeValue(new File("d://a.txt"), person);//写入到文件</span></span><br><span class="line">        <span class="comment">//mapper.writeValue(new FileWriter("d://b.txt"), person);//写入到字符流</span></span><br><span class="line">        String json = mapper.writeValueAsString(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>注解(在实体类当中添加)<ul>
<li>@JsonIgnore：排除属性。</li>
<li>@JsonFormat：属性值的格式化。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@JsonIgnore</span> <span class="comment">//该注解会将属性忽略（输出时）</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>{“name”:”张三”,”age”:20,”address”:”北京”}</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>) <span class="comment">//该注解会对属性进行格式化</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”}</p>
</blockquote>
<ol start="4">
<li>复杂Java对象转换</li>
</ol>
<p><strong>List（z转换后是数组格式）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test3() throws Exception &#123;</span><br><span class="line">    &#x2F;&#x2F;1.创建person对象</span><br><span class="line">    Persion p1 &#x3D; new Persion();</span><br><span class="line">    p1.setName(&quot;张三&quot;);</span><br><span class="line">    p1.setAge(20);</span><br><span class="line">    p1.setAddress(&quot;北京&quot;);</span><br><span class="line">    p1.setBirthday(new Date());</span><br><span class="line"></span><br><span class="line">    Persion p2 &#x3D; new Persion();</span><br><span class="line">    p2.setName(&quot;张三&quot;);</span><br><span class="line">    p2.setAge(20);</span><br><span class="line">    p2.setAddress(&quot;北京&quot;);</span><br><span class="line">    p2.setBirthday(new Date());</span><br><span class="line"></span><br><span class="line">    Persion p3 &#x3D; new Persion();</span><br><span class="line">    p3.setName(&quot;张三&quot;);</span><br><span class="line">    p3.setAge(20);</span><br><span class="line">    p3.setAddress(&quot;北京&quot;);</span><br><span class="line">    p3.setBirthday(new Date());</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建List集合</span><br><span class="line">    ArrayList&lt;Persion&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    list.add(p1);</span><br><span class="line">    list.add(p2);</span><br><span class="line">    list.add(p3);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2.转换</span><br><span class="line">    ObjectMapper mapper &#x3D; new ObjectMapper();</span><br><span class="line">    String json &#x3D; mapper.writeValueAsString(list);</span><br><span class="line">    System.out.println(json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”},{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”},{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”}]</p>
</blockquote>
<p><strong>Map(转换后是对象格式)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建person对象</span></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">    map.put(<span class="string">"address"</span>, <span class="string">"北京"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.转换</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = mapper.writeValueAsString(map);</span><br><span class="line">    System.out.println(json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><strong>注册时用户名校验</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//给username绑定blur事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#username"</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取文本框内容</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> username = $(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> s_username = $(<span class="string">"#s_username"</span>);</span></span><br><span class="line"><span class="javascript">                $.<span class="keyword">get</span>("findUserNameServlet", &#123;username, username&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (d.userExist == <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//用户名岑在</span></span></span><br><span class="line">                        s_username.html(d.msg);</span><br><span class="line"><span class="actionscript">                        s_username.css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//用户名不存在</span></span></span><br><span class="line">                        s_username.html(d.msg);</span><br><span class="line"><span class="actionscript">                        s_username.css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                &#125;,<span class="string">"json"</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"s_username"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/findUserNameServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindUserNameServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//解决服务器响应数据在客户端中文乱码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置相应格式为json</span></span><br><span class="line">        <span class="comment">//response.setContentType("application/json;charset=utf-8");</span></span><br><span class="line"></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="comment">//此处应从数据库中查询，战且简化操作</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"tom"</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//用户名存在</span></span><br><span class="line">            map.put(<span class="string">"userExist"</span>, <span class="keyword">true</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"用户名已存在！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户名不存在</span></span><br><span class="line">            map.put(<span class="string">"userExist"</span>, <span class="keyword">false</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"用户名可用！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将map转为json</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将数据写入到客户端</span></span><br><span class="line">        mapper.writeValue(response.getWriter(), map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery高级使用</title>
    <url>/2020/07/14/JQuery%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h4 id="三种方式显示和隐藏元素"><a href="#三种方式显示和隐藏元素" class="headerlink" title="三种方式显示和隐藏元素"></a>三种方式显示和隐藏元素</h4><ol>
<li>默认显示和隐藏方式<ul>
<li>show([speed,[easing],[fn]])</li>
<li>hide([speed,[easing],[fn]])</li>
<li>toggle([speed,[easing],[fn]])</li>
</ul>
</li>
</ol>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击按钮隐藏div"</span> <span class="attr">onclick</span>=<span class="string">"hideFn()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击按钮显示div"</span> <span class="attr">onclick</span>=<span class="string">"showFn()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击按钮切换div显示或隐藏"</span> <span class="attr">onclick</span>=<span class="string">"toggleFn()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showDiv"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;background-color:pink;"</span>&gt;</span></span><br><span class="line">    div。。。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">hideFn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#showDiv"</span>).hide(<span class="string">"slow"</span>,<span class="string">"linear"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showFn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#showDiv"</span>).show(<span class="string">"fast"</span>,<span class="string">"swing"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"显示了"</span>)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">toggleFn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#showDiv"</span>).toggle(<span class="string">"slow"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>滑动显示和隐藏方式<ul>
<li>slideDown([speed,[easing],[fn]])</li>
<li>slideUp([speed,[easing],[fn]])</li>
<li>slideToggle([speed,[easing],[fn]])</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function hideFn() &#123;</span><br><span class="line">    $("#showDiv").slideUp("slow");</span><br><span class="line">&#125;</span><br><span class="line">function showFn() &#123;</span><br><span class="line">    $("#showDiv").slideDown("fast");</span><br><span class="line">&#125;</span><br><span class="line">function toggleFn() &#123;</span><br><span class="line">    $("#showDiv").slideToggle("slow");</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>淡入淡出显示和隐藏方式<ul>
<li>fadeIn([speed,[easing],[fn]])</li>
<li>fadeOut([speed,[easing],[fn]])</li>
<li>fadeToggle([speed,[easing],[fn]])</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function hideFn() &#123;</span><br><span class="line">    $("#showDiv").fadeOut("slow");</span><br><span class="line">&#125;</span><br><span class="line">function showFn() &#123;</span><br><span class="line">    $("#showDiv").fadeIn("fast");</span><br><span class="line">&#125;</span><br><span class="line">function toggleFn() &#123;</span><br><span class="line">    $("#showDiv").fadeToggle("slow");</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>参数介绍</strong></p>
<ul>
<li>speed：动画的速度。有三个预定义的值（”slow”、”normal”、”fast”），或表示动画时长的毫秒数（如：1000）。</li>
<li>easing：用来指定切换效果，默认是”swing”（先慢，中间快，最后又变慢），可以用参数”linear”（匀速）。</li>
<li>fn：在动画完成时执行的函数，每个元素执行一次。</li>
</ul>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h4 id="js的遍历方式（for）"><a href="#js的遍历方式（for）" class="headerlink" title="js的遍历方式（for）"></a>js的遍历方式（for）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> citys = $(<span class="string">"#city li"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; citys.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            alert(i+<span class="string">":"</span>+citys[i].innerHTML);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="jQuery的遍历方式"><a href="#jQuery的遍历方式" class="headerlink" title="jQuery的遍历方式"></a>jQuery的遍历方式</h4><ol>
<li>jQuery对象，each(callback)：callback是回调函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var citys = $("#city li");</span><br><span class="line">citys.each(function () &#123;</span><br><span class="line">    //第一种方式，不能获取索引</span><br><span class="line">    alert(this.innerHTML)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var citys = $("#city li");</span><br><span class="line">citys.each(function (index, element) &#123;</span><br><span class="line">    //第二种方式，在回调函数中定义参数：index（索引）、element（元素对象）</span><br><span class="line">    alert(index + ":" + element.innerHTML);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var citys = $("#city li");</span><br><span class="line">        citys.each(function (index, element) &#123;</span><br><span class="line">            //第三种方式，在回调函数中定义参数：index（索引）、element（元素对象）</span><br><span class="line">            if ("上海"==$(element).html())&#123;</span><br><span class="line">                //如果返回false，结束循环（break）；返回true，结束本次循环，继续下一次循环（continue）</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            alert(index + ":" + $(element).html());</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>$.each(object, [callback])</li>
</ol>
<p>object参数：可以是jquery对象，也可以是数组对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var citys = $("#city li");</span><br><span class="line">        $.each(citys, function (index, element) &#123;</span><br><span class="line">            //第三种方式，在回调函数中定义参数：index（索引）、element（元素对象）</span><br><span class="line">            if ("上海"==$(element).html())&#123;</span><br><span class="line">                //如果返回false，结束循环（break）；返回true，结束本次循环，继续下一次循环（continue）</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            alert(index + ":" + $(element).html());</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>for..of（jQuery3.0版本之后提供的方式）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var citys = $("#city li");</span><br><span class="line">for(li of citys)&#123;</span><br><span class="line">    alert($(li).html());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h4 id="jQuery标准的绑定方式"><a href="#jQuery标准的绑定方式" class="headerlink" title="jQuery标准的绑定方式"></a>jQuery标准的绑定方式</h4><p>jquery对象.事件名称(回调函数)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"绑定点击事件"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#name"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"点击完成！"</span>)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//给name绑定鼠标移进事件、绑定移除事件(链式绑定)</span><br><span class="line">$("#name").mouseover(function () &#123;</span><br><span class="line">    alert("鼠标移进！")</span><br><span class="line">&#125;).mouseout(function () &#123;</span><br><span class="line">    alert("鼠标移出！")</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">        //让文本框获得焦点（不写回调函数，执行默认效果）</span><br><span class="line">        $("#name").focus();</span><br><span class="line">        $("#form").submit();//用于提交表单</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="on绑定事件、off解除绑定"><a href="#on绑定事件、off解除绑定" class="headerlink" title="on绑定事件、off解除绑定"></a>on绑定事件、off解除绑定</h4><p>jquery对象.on(“事件名称”, 回调函数)<br>jquery对象.off(“事件名称”)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"使用on绑定点击事件"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"使用off解绑点击事件"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn1"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"单击事件绑定成功！"</span>)</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn2"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn1"</span>).off(<span class="string">"click"</span>);</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"已解除单击事件！"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// $("#btn1").off();//解除所有事件</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="事件切换：toggle"><a href="#事件切换：toggle" class="headerlink" title="事件切换：toggle"></a>事件切换：toggle</h4><p>jquery对象.toggle(fn1, fn2…),<strong>注意：</strong>使用版本jquery需要引入migrate插件才能生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"事件切换"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"txt"</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;"</span>&gt;</span>切换div颜色。。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn"</span>).toggle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#txt"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"yellow"</span>)</span></span><br><span class="line"><span class="actionscript">        &#125;),<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#txt"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>)</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><strong>广告显示与隐藏</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ad"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"WEB-INF/img/pic1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">adShow</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#ad"</span>).show(<span class="string">"slow"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">adHide</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#ad"</span>).hide(<span class="string">"slow"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义定时器,调用adShow()</span></span></span><br><span class="line">        setTimeout(adShow, 3000);</span><br><span class="line"><span class="actionscript">        <span class="comment">//定义定时器,adHide()</span></span></span><br><span class="line">        setTimeout(adHide, 8000);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="插件（增强jQuery的功能）"><a href="#插件（增强jQuery的功能）" class="headerlink" title="插件（增强jQuery的功能）"></a>插件（增强jQuery的功能）</h2><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ol>
<li>$.fn.extend(object)：增强通过jQuery获取的对象的功能  $(“#id值”)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn-check"</span> <span class="attr">value</span>=<span class="string">"点击选中复选框"</span> <span class="attr">onclick</span>=<span class="string">"checkFn()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn-uncheck"</span> <span class="attr">value</span>=<span class="string">"点击取消选中复选框"</span> <span class="attr">onclick</span>=<span class="string">"uncheckFn()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"football"</span>&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"basketball"</span>&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"volleyball"</span>&gt;</span>排球</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 定义jQuery的对象插件</span></span></span><br><span class="line"><span class="javascript">    $.fn.extend(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义了一个check()方法</span></span></span><br><span class="line"><span class="actionscript">        check:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//定义了一个uncheck()方法</span></span></span><br><span class="line"><span class="actionscript">        uncheck:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript"><span class="comment">//使用插件，实现选中所有复选框，取消选中</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn-check"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"input[type='checkbox']"</span>).check();</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn-uncheck"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"input[type='checkbox']"</span>).uncheck();</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>$.extend(object)：增强通过jQuery对象自身的功能  $/jquery</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//对全局方法进行扩展，扩展min方法：求两数最小值；扩展max方法：求两数最大值</span></span></span><br><span class="line"><span class="javascript">    $.extend(&#123;</span></span><br><span class="line"><span class="actionscript">        max:<span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//返回两数中最大值</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> a &gt;= b ? a:b;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        min:<span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//返回两数中最大值</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> a &gt;= b ? b:a;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">//调用全局方法</span></span></span><br><span class="line"><span class="javascript">    alert($.max(<span class="number">2</span>, <span class="number">3</span>));</span></span><br><span class="line"><span class="javascript">    alert($.min(<span class="number">1</span>, <span class="number">5</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/2020/07/13/JQuery/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>JQuery是一个JavaScript的框架。（简化js开发）</p>
<ul>
<li>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</li>
<li>使用方法：<ul>
<li>导入jquery的js文件</li>
<li>使用jquery的方法即可</li>
</ul>
</li>
</ul>
<a id="more"></a>

<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"WEB-INF/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        alert($(<span class="string">"#div1"</span>).html())</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="JQuery对象和JS对象的转换"><a href="#JQuery对象和JS对象的转换" class="headerlink" title="JQuery对象和JS对象的转换"></a>JQuery对象和JS对象的转换</h2><ol>
<li>jquery –&gt; js：<strong>jquery对象(索引)</strong> 或 <strong>jquery对象.get(索引)</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>div2...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $divs = $(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">        $divs[<span class="number">0</span>].innerHTML = <span class="string">"bbb"</span>;</span></span><br><span class="line"><span class="actionscript">        $divs.get(<span class="number">1</span>).innerHTML = <span class="string">"ccc"</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>js –&gt; jquery：<strong>$(js对象)</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>div2...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//将js对象转为jquery对象，从而调用jquery的方法</span></span></span><br><span class="line"><span class="javascript">            $(divs[i]).html(<span class="string">"aaa"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>筛选具有相似特征的元素（标签）</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ol>
<li>事件绑定<br></li>
</ol>
<ul>
<li>$(“#id值”).方法名(function(){方法体});</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"点击了按钮！"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>入口函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//jquery入口函数（DOM文档加载完毕后执行）</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>与window.onload的区别：</strong><br>window.onload = function(){};只能定义一次，再次定义会被覆盖掉。<br><br>入口函数可以定义多个。<br>3. 样式控制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#div1"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><ol>
<li>基本选择器<ol>
<li>标签选择器（元素选择器）<ul>
<li>语法：$(“html标签名”)获得所有匹配标签名的子元素</li>
</ul>
</li>
<li>id选择器<ul>
<li>语法：$(“id的属性值”)获得与指定id属性值匹配的元素</li>
</ul>
</li>
<li>类选择器<ul>
<li>语法：$(“.class的属性值”)获得与指定class属性值匹配的元素</li>
</ul>
</li>
<li>并集选择器<ul>
<li>语法：$(“选择器1, 选择器2…”)获取多个选择器选中的所有元素</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"改变id为one的元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"改变元素名为&lt;div&gt;的所有元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"改变class为mini的所有元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> <span class="attr">value</span>=<span class="string">"改变所有的&lt;span&gt;元素和id为two的元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#one"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">".mini"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"span, #two"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>层级选择器<ol>
<li>后代选择器<ul>
<li>语法：$(“A B”)选择A元素内部的所有B元素</li>
</ul>
</li>
<li>子选择器<ul>
<li>语法：$(“A &gt; B”)选择A元素内部的所有B子元素</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"改变&lt;body&gt;内所有&lt;div&gt;的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"改变&lt;body&gt;内子&lt;div&gt;的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"body div"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"body &gt; div"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>属性选择器<ol>
<li>属性名称选择器<ul>
<li>语法：$(“A[属性名]”)包含指定属性的选择器</li>
</ul>
</li>
<li>属性选择器<ul>
<li>语法：$(“A[属性名=’值’]”)包含指定属性等于指定值的选择器</li>
</ul>
</li>
<li>复合属性选择器<ul>
<li>语法：$(“A[属性名=’值’][]…”)包含多个属性条件的选择器</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"含有属性title的div元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"属性title值等于test的div元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"属性title值不等于test的div元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> <span class="attr">value</span>=<span class="string">"属性title值以te开始的div元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn5"</span> <span class="attr">value</span>=<span class="string">"属性title值以est结束的div元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn6"</span> <span class="attr">value</span>=<span class="string">"属性title值含有es的div元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn7"</span> <span class="attr">value</span>=<span class="string">"选取有属性id的div元素，然后在结果中选取属性值title值含有es的div元素背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[title]"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[title = 'test']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[title != 'test']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[title ^= 'te']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[title $= 'est']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[title *= 'es']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn7"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[id][title *= 'es']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>过滤选择器<ol>
<li>首元素选择器<ul>
<li>语法：:first获得选择的元素中第一个元素</li>
</ul>
</li>
<li>尾元素选择器<ul>
<li>语法：:last获得选择的元素中最后一个元素</li>
</ul>
</li>
<li>非元素选择器<ul>
<li>语法：:not(selector)不包括指定内容的元素</li>
</ul>
</li>
<li>偶数选择器<ul>
<li>语法：:even 偶数, 从0开始计数</li>
</ul>
</li>
<li>奇数选择器<ul>
<li>语法：:odd 奇数, 从0开始计数</li>
</ul>
</li>
<li>等于选择器<ul>
<li>语法：:eq(index)指定索引元素</li>
</ul>
</li>
<li>大于选择器<ul>
<li>语法：:gt(index)大于指定索引元素</li>
</ul>
</li>
<li>小于选择器<ul>
<li>语法：:lt(index)小于指定索引元素</li>
</ul>
</li>
<li>标题选择器<ul>
<li>语法：:header 获得标题(h1~h6)元素，固定写法</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"改变第一个div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"改变最后一个div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"改变class不为one的所有div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> <span class="attr">value</span>=<span class="string">"改变索引值为偶数的的div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn5"</span> <span class="attr">value</span>=<span class="string">"改变索引值为奇数的的div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn6"</span> <span class="attr">value</span>=<span class="string">"改变索引值大于3的的div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn7"</span> <span class="attr">value</span>=<span class="string">"改变索引值等于3的的div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn8"</span> <span class="attr">value</span>=<span class="string">"改变索引值小于3的的div元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn9"</span> <span class="attr">value</span>=<span class="string">"改变所有标题元素的背景色为红色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:first"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:last"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:not(.one)"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:even"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:odd"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:gt(3)"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn7"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:eq(3)"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn8"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div:lt(3)"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn9"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">":header"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>表单过滤选择器<ol>
<li>可用元素选择器<ul>
<li>语法：:enabled获得可用元素</li>
</ul>
</li>
<li>不可用元素选择器<ul>
<li>语法：:disabled获得不可用元素</li>
</ul>
</li>
<li>选中选择器<ul>
<li>语法：:checked获得单选/复选框中的元素</li>
</ul>
</li>
<li>选中选择器<ul>
<li>语法：:selected获得下拉框选中的元素</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"利用jQuery对象的val()方法改变表单内可用&lt;input&gt;元素的值"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"利用jQuery对象的val()方法改变表单内不可用&lt;input&gt;元素的值"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"利用jQuery对象的length属性获取复选框选中的个数"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> <span class="attr">value</span>=<span class="string">"利用jQuery对象的length属性获取下拉框选中的个数"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"input[type='text']:enabled"</span>).val(<span class="string">"aaa"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"input[type='text']:disabled"</span>).val(<span class="string">"aaa"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">"input[type='checkbox']:checked"</span>).length);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//要获取的时option的选中个数而不是下拉框的个数</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">"select &gt; option:selected"</span>).length);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h4 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h4><ol>
<li>html()：获取/设置元素的标签体内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//获取</span><br><span class="line">$("#id值").html();</span><br><span class="line">//设置,直接替换源码</span><br><span class="line">$("#id值").html("aaa")</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>text()：获取/设置元素的标签体纯文本内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//获取</span><br><span class="line">$("#id值").text();</span><br><span class="line">//设置</span><br><span class="line">$("#id值").text("aaa")</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>val()：获取/设置元素的value属性值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//获取</span><br><span class="line">$("#id值").val();</span><br><span class="line">//设置</span><br><span class="line">$("#id值").val("aaa")</span><br></pre></td></tr></table></figure>
<h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><ol>
<li>通用属性操作<ul>
<li>attr()：获取/设置元素的属性</li>
<li>removeAttr()：删除元素的属性</li>
<li>prop()：获取/设置元素的属性</li>
<li>removeProp：删除元素的属性</li>
</ul>
</li>
</ol>
<p><strong>attr和prop的区别：</strong><br>    - 操作元素的固有属性（元素自带的属性），建议用prop。（如：href、src）<br>    - 操作自定义属性，建议用attr。（如：aaa）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"bj"</span> <span class="attr">name</span>=<span class="string">"beijing"</span> <span class="attr">xxx</span>=<span class="string">"yyy"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"tj"</span> <span class="attr">name</span>=<span class="string">"tianjin"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"hobby"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取</span></span></span><br><span class="line"><span class="javascript">        alert($(<span class="string">"#bj"</span>).attr(<span class="string">"name"</span>));<span class="comment">//li中name为自定义属性</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//设置</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#bj"</span>).attr(<span class="string">"name"</span>, <span class="string">"首都"</span>);<span class="comment">//此处修改的是name属性</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//增加aaa属性，值为bbb</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#bj"</span>).attr(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//删除xxx属性，并检验xxx属性是否存在</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#bj"</span>).removeAttr(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取hobby的选中状态</span></span></span><br><span class="line"><span class="javascript">        alert($(<span class="string">"#hobby"</span>).prop(<span class="string">"checked"</span>));<span class="comment">//checked和option不能用attr获取到</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对class属性操作<ul>
<li>addClass：添加Class属性值</li>
<li>removeClass：删除Class属性值</li>
<li>toggleClass：切换Class属性值。（如：元素对象上存在class=”one”,则删除。若不存在class=”one”，则添加。）</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"采用属性增加样式（改变id=one的样式）"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"addClass"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"removeClass"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> <span class="attr">value</span>=<span class="string">"切换样式"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn5"</span> <span class="attr">value</span>=<span class="string">"通过css()获得id=one背景颜色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn6"</span> <span class="attr">value</span>=<span class="string">"通过css()设置id=one背景颜色为绿色"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">style</span>=<span class="string">"background-color:cyan;"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#one"</span>).prop(<span class="string">"class"</span>, <span class="string">"aaa"</span>);<span class="comment">//class="aaa"事先设置了样式</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#one"</span>).addClass(<span class="string">"aaa"</span>);<span class="comment">//class="aaa"事先设置了样式</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#one"</span>).removeClass(<span class="string">"aaa"</span>);<span class="comment">//class="aaa"事先设置了样式</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#one"</span>).toggleClass(<span class="string">"aaa"</span>);<span class="comment">//class="aaa"事先设置了样式</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">"#one"</span>).css(<span class="string">"backgroundColor"</span>));<span class="comment">//class="aaa"事先设置了样式</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#one"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"green"</span>);<span class="comment">//class="aaa"事先设置了样式</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h4><ol>
<li>append()：父元素将子元素追加到末尾。<ul>
<li>（对象1.append(对象2)：将对象2追加到对象1的末尾）。</li>
</ul>
</li>
<li>prepend()：父元素将子元素插入到开头。<ul>
<li>（对象1.prepend(对象2)：将对象2插入到对象1的开头）。</li>
</ul>
</li>
<li>appendTo()：父元素将子元素插入到开头。<ul>
<li>（对象1.prepend(对象2)：将对象1添加到到对象2的末尾）。</li>
</ul>
</li>
<li>prependTo()：父元素将子元素插入到开头。<ul>
<li>（对象1.prepend(对象2)：将对象1添加到到对象2的开头）。</li>
</ul>
</li>
<li>after()：添加元素a到元素b后。<ul>
<li>（对象1.after(对象2)：将对象1添加到到对象2后，在同一级。）</li>
</ul>
</li>
<li>before()：添加元素a到元素b前。<ul>
<li>（对象1.after(对象2)：将对象1添加到到对象2前，在同一级。）</li>
</ul>
</li>
<li>insertAfter()：添加元素a到元素b前。<ul>
<li>（对象1.after(对象2)：将对象1插入到到对象2后，在同一级。）</li>
</ul>
</li>
<li>insertBefore()：添加元素a到元素b后。<ul>
<li>（对象1.after(对象2)：将对象1插入到到对象2前，在同一级。）</li>
</ul>
</li>
<li>remove()：移除元素。<ul>
<li>（对象.remove()：将对象删除。）</li>
</ul>
</li>
<li>empty()：清空元素的所有后代元素。<ul>
<li>（对象.empty()：将对象的后代元素全部清空，但保留当前对象及其属性节点。）</li>
</ul>
</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol>
<li>隔行换色</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    td&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"tab1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"删除"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：将数据行的奇数行背景色设置为pink，偶数行背景色为yellow</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//1. 获取所有奇数行tr</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"tr:gt(1):odd"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2. 获取所有偶数行tr</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"tr:gt(1):even"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"yellow"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>全选全部选</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：全选全不选</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">selectAll</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">".itemSelect"</span>).prop(<span class="string">"checked"</span>, obj.checked);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"tab1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"删除"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">onclick</span>=<span class="string">"selectAll(this)"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>下拉列表选中条目左右移动</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span>&#123;</span></span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#leftSelect</span>, <span class="selector-id">#btn</span>, <span class="selector-id">#rightSelect</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#toRight"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#rightSelect"</span>).append($(<span class="string">"#leftSelect &gt; option:selected"</span>));</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#toLeft"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#rightSelect &gt; option:selected"</span>).appendTo($(<span class="string">"#leftSelect"</span>));</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"leftSelect"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"toRight"</span> <span class="attr">value</span>=<span class="string">"--&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"toLeft"</span> <span class="attr">value</span>=<span class="string">"&lt;--"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"rightSelect"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>钱七<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter过滤器</title>
    <url>/2020/07/10/Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter:过滤器"></a>Filter:过滤器</h2><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>一般用于完成一些通用操作。如登陆验证、统一编码处理、敏感字符过滤等。</p>
<h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><pre><code>1. 定义一个类实现Filter
2. 复写方法
3. 配置拦截路径</code></pre><a id="more"></a>

<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)<span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"该过滤器执行啦！！！"</span>);</span><br><span class="line">        chain.doFilter(req, resp);<span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>web.xml配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>top.rainbowcat.web.filter.FilterDemo1top.rainbowcat.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>过滤器执行流程<ol>
<li>执行过滤器</li>
<li>执行放行后的资源</li>
<li>执行放行后的代码</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//该处对request对象请求消息进行增强</span></span><br><span class="line">    System.out.println(<span class="string">"该过滤器执行啦！！！"</span>);</span><br><span class="line">    chain.doFilter(req, resp);<span class="comment">//放行</span></span><br><span class="line">    <span class="comment">//该处对response对象响应消息进行增强</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>过滤器生命周期方法</p>
<ol>
<li>init方法：服务器启动后，会创建Filter对象，调用init方法。用于加载资源。</li>
<li>destroy方法：在服务器关闭后，Filter对象被销毁。如果服务器时正常关闭，则会执行destroy方法。用于释放资源。</li>
<li>doFilter方法：每一次请求被拦截资源时会执行。</li>
</ol>
</li>
<li><p>过滤器配置详解</p>
<ol>
<li><p>拦截路径的配置</p>
<ul>
<li>具体的资源路径，如：/index.jsp 只有访问index.jsp时，过滤器才会被执行</li>
<li>拦截目录，如：/user/* 访问/user下的所有资源时，过滤器才会被执行</li>
<li>后缀名拦截，如：*.jsp 访问所有后缀名为.jsp资源时，过滤器才会被执行</li>
<li>拦截所有资源：/* 访问所有资源时，过滤器都会被执行</li>
</ul>
</li>
<li><p>拦截方式的配置：资源被访问的方式</p>
<ul>
<li><p>注解配置</p>
<ol>
<li>设置dispatchType属性<ul>
<li>REQUEST：默认值。浏览器直接请求资源</li>
<li>FORWARD：转发访问资源，只有转发访问到的资源会被拦截</li>
<li>INCLUDE：包含访问资源</li>
<li>ERROR：错误跳转资源</li>
<li>ASYNC：异步访问资源</li>
</ul>
</li>
</ol>
<p>  <strong>示例：</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="meta">@WebFilter</span>(value = <span class="string">"/*"</span>, dispatcherTypes =DispatcherType.REQUEST)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>web.xml配置：只需增加<dispatcher>属性值</dispatcher>标签即可<br></li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;demo1&lt;/filter-name&gt;</span><br><span class="line">    &lt;!--拦截路径--&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><p>过滤器链（配置多个过滤器）<br></p>
</li>
</ol>
<p><strong>执行顺序：</strong>如果有两个过滤器（过滤器1、过滤器2）<br><br>过滤器1 –&gt; 过滤器2 –&gt; 资源执行 –&gt; 过滤器2 –&gt; 过滤器1<br><br><strong>示例：</strong><br>第一个过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FilterDemo1执行啦！！！"</span>);</span><br><span class="line">        chain.doFilter(req, resp);<span class="comment">//放行</span></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo1回来啦！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//该处对request对象请求消息进行增强</span></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo2执行啦！！！"</span>);</span><br><span class="line">        chain.doFilter(req, resp);<span class="comment">//放行</span></span><br><span class="line">        <span class="comment">//该处对response对象响应消息进行增强</span></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo2回来啦！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：<br>    FilterDemo1执行啦！！！<br>    FilterDemo2执行啦！！！<br>    FilterDemo2回来啦！！！<br>    FilterDemo1回来啦！！！</p>
<p>  <strong>过滤器先后顺序问题：</strong></p>
<ul>
<li>注解配置：按照类名的字符串比较规则比较，值小的先执行。<br>如：AFilter和BFilter，AFilter就先执行。</li>
<li>web.xml配置：按照编写顺序从上到下执行。</li>
</ul>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h5><p><strong>需求分析：</strong></p>
<ol>
<li>访问资源时验证是否登录</li>
<li>如果已经登陆，直接放行</li>
<li>没有登陆，则跳转到登陆页面</li>
</ol>
<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//强制转换</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        <span class="comment">//1. 获取资源请求路径</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        <span class="comment">//2. 判断是否包含登陆相关的资源路径,要注意排除掉css/js/图片/验证码等资源</span></span><br><span class="line">        <span class="keyword">if</span> (uri.contains(<span class="string">"/login.jsp"</span>) || uri.contains(<span class="string">"/loginServlet"</span>) ||</span><br><span class="line">                uri.contains(<span class="string">"/css/"</span>) || uri.contains(<span class="string">"/js/"</span>) ||</span><br><span class="line">                uri.contains(<span class="string">"/fonts/"</span>) || uri.contains(<span class="string">"/checkCodeServlet"</span>))&#123;</span><br><span class="line">            <span class="comment">//包含，用户正要登陆，放行</span></span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不包含，用户需要登陆验证</span></span><br><span class="line">            <span class="comment">//3. 从session中获取用户登陆信息</span></span><br><span class="line">            Object user = request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//登陆了，放行</span></span><br><span class="line">                chain.doFilter(req, resp);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//没有登陆，跳转登陆页面</span></span><br><span class="line">                request.setAttribute(<span class="string">"login_msg"</span>, <span class="string">"您尚未登陆，请登陆！"</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(request, resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="敏感词汇过滤"><a href="#敏感词汇过滤" class="headerlink" title="敏感词汇过滤"></a>敏感词汇过滤</h5><p><strong>需求分析：</strong></p>
<ol>
<li>录入数据时验证是否含有敏感数据</li>
<li>敏感词汇参考《敏感词汇.txt》</li>
<li>如果有敏感词汇，替换为***</li>
</ol>
<p><strong>增强对象的功能：设计模式</strong></p>
<ul>
<li><p>设计模式：一些通用的解决固定问题的方式。</p>
<ol>
<li><p>装饰模式</p>
</li>
<li><p>代理模式</p>
<ul>
<li><p>概念：</p>
<ol>
<li>真实对象：被代理的对象</li>
<li>代理对象：</li>
<li>代理模式：代理对象代理真实对象，达到增强真实对象的目的。</li>
</ol>
</li>
<li><p>实现方式：</p>
<ol>
<li>静态代理：有一个类文件藐视代理模式</li>
<li>在内存中形成代理类<ul>
<li>实现步骤：<ol>
<li>代理对象和真实对象实现相同的接口</li>
<li>代理对象 = Proxy.newProxyInstance();</li>
<li>使用代理对象调用方法</li>
<li>增强方法</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<p><strong>代码实现：</strong><br>过滤器部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敏感词汇过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建代理对象，增强getParameter方法</span></span><br><span class="line">        ServletRequest proxy_req = (ServletRequest) Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//增强getParameter方法</span></span><br><span class="line">                <span class="comment">//判断是否时getParameter方法</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"getParameter"</span>))&#123;</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    <span class="comment">//获取返回值</span></span><br><span class="line">                    String value = (String) method.invoke(req, args);</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (String str : list)&#123;</span><br><span class="line">                            <span class="keyword">if</span> (value.contains(str))&#123;</span><br><span class="line">                                value = value.replace(str, <span class="string">"***"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断方法是否为getParameterMap</span></span><br><span class="line">                <span class="comment">//判断方法是否为getParameterValue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> method.invoke(req, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//2.放行,以定要用代理对象！！！而不是req</span></span><br><span class="line">        chain.doFilter(proxy_req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//敏感词汇集合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.加载文件的真实路径</span></span><br><span class="line">            ServletContext servletContext = config.getServletContext();</span><br><span class="line">            String realPath = servletContext.getRealPath(<span class="string">"/WEB-INF/classes/敏感词汇.txt"</span>);</span><br><span class="line">            <span class="comment">//2.读取文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(realPath));</span><br><span class="line">            <span class="comment">//3.将文件的每一行数据添加到list集合</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/textServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        String msg = request.getParameter(<span class="string">"msg"</span>);</span><br><span class="line">        System.out.println(name+<span class="string">":"</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在地址栏进行传参，控制台查看输出情况即可。</p>
]]></content>
      <categories>
        <category>Filter</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>EL使用</title>
    <url>/2020/04/07/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ol>
<li>概念：Expression Language表达式语言</li>
<li>作用：替换和简化jsp页面中的Java代码</li>
<li>语法：${表达式}</li>
<li>注意：jsp默认支持el表达式</li>
<li>使用：<ul>
<li>运算</li>
<li>获取值</li>
</ul>
</li>
</ol>
<a id="more"></a>

<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul>
<li>运算符<ol>
<li>算数运算符：+ - * /(div) %(mod)</li>
<li>比较运算符：&gt; &lt; &gt;= &lt;= == !=</li>
<li>逻辑运算符：&amp;&amp;(and) ||(or) !(not)</li>
<li>空运算符：empty<ul>
<li>${empty list}：用于判断字符串、集合、数组对象是否为null或者长度是否为0</li>
<li>${not empty str}：用于判断字符串、集合、数组对象是否不为null并且长度&gt;0</li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h3&gt;算数运算&lt;/h3&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> + <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> / <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> div <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> % <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> mod <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  &lt;h3&gt;比较运算&lt;/h3&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> == <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  &lt;h3&gt;逻辑运算&lt;/h3&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> &gt; <span class="number">4</span> &amp;&amp; <span class="number">3</span> &lt; <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  $&#123;<span class="number">3</span> &gt; <span class="number">4</span> and <span class="number">3</span> &lt; <span class="number">4</span>&#125;&lt;br&gt;</span><br><span class="line">  &lt;h3&gt;empty运算符&lt;/h3&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    String str = <span class="string">"abc"</span>;</span><br><span class="line">    request.setAttribute(<span class="string">"str"</span>, str);</span><br><span class="line"></span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">  %&gt;</span><br><span class="line">  $&#123;empty str&#125;</span><br><span class="line">  $&#123;not empty list&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><ul>
<li><p>el表达式只能从域对象中获取值</p>
</li>
<li><p>语法：</p>
<ol>
<li><p>${域名称.键名}：从指定域中获取指定的键的值。</p>
<ul>
<li>域名称：</li>
</ul>
<ol>
<li>pageScope        –&gt;     pageContext</li>
<li>requestScope     –&gt;     request</li>
<li>sessionScope     –&gt;     session</li>
<li>applicationScope –&gt;     application(ServletContext)</li>
</ol>
<ul>
<li>举例：在request域中存储了name=张三</li>
<li>获取：${reques.name}</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;获取域中的值&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setAttribute(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"age"</span>, <span class="string">"23"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;h3&gt;获取值&lt;/h3&gt;</span><br><span class="line">$&#123;requestScope.name&#125;</span><br><span class="line">$&#123;sessionScope.age&#125;</span><br><span class="line">&lt;%--  获取不到值时显示空字符串  --%&gt;</span><br><span class="line">$&#123;sessionScope.haha&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>${键名}：表示依次从最小的域中查找是否有该键的对应值，直到找到为止。</p>
</li>
<li><p>获取对象、List集合、Map集合中的值</p>
<ul>
<li>对象：${域名称.键名.属性名}（本质上会去调用对象的getter方法）</li>
<li>List集合：${域名称.键名[索引]}（索引超出数组长度，返回空字符串）</li>
<li>Map集合：${域名称.键名.key名称}（或：${域名称.键名[“key名称”]}）</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="隐式对象pageContext"><a href="#隐式对象pageContext" class="headerlink" title="隐式对象pageContext"></a>隐式对象pageContext</h4><p>${pageContext.request}<br>在jsp页面中动态获取虚拟目录<br>${pageContext.request.contextPath}</p>
<h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><ol>
<li>概念：JavaServer Page Tag Library  JSP标准标签库</li>
<li>作用：用于简化和替换jsp页面的java代码</li>
<li>使用步骤：<ol>
<li>导入jstl相关jar包</li>
<li>引入标签库：taglib指令：&lt;%@ taglib &gt;</li>
<li>使用标签</li>
</ol>
</li>
<li>常用的JSTL标签<ol>
<li>if：相当于Java代码的if语句</li>
<li>choose：相当于Java代码的switch语句</li>
<li>foreach：相当于Java代码的for语句</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>EL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习笔记（二）</title>
    <url>/2020/03/20/BOM%E5%92%8CDOM/</url>
    <content><![CDATA[<h1 id="BOM-amp-DOM"><a href="#BOM-amp-DOM" class="headerlink" title="BOM &amp; DOM"></a>BOM &amp; DOM</h1><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>Browser Object Model浏览器对象模型，将浏览器的各个组成部分封装成对象。</p>
<a id="more"></a>

<h4 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h4><h6 id="Window：窗口对象"><a href="#Window：窗口对象" class="headerlink" title="Window：窗口对象"></a>Window：窗口对象</h6><ul>
<li>创建<br>Window的对象不需要创建，直接可以调用方法。</li>
<li>方法</li>
</ul>
<ol>
<li><p>与弹出框有关的方法：<br><br><strong>alert()：</strong> 显示带有一段消息和一个确认按钮的警告框。<br><br><strong>confirm()：</strong> 显示带有一段消息以及确认按钮和取消按钮的对话框。返回值为false或true。<br><br><strong>prompt()：</strong> 显示可提示用户输入的对话框。</p>
</li>
<li><p>与打开关闭有关的方法：<br><br><strong>open():</strong> 打开一个新浏览器窗口对象，可加参数<br><br><strong>close():</strong> 关闭浏览器窗口<br></p>
</li>
<li><p>与定时器有关的方法：<br><br><strong>setTimeout()：</strong> 在指定的毫秒数后调用函数或计算表达式。（一次性定时器）<br></p>
<blockquote>
<p>var id = setTimeout(“js代码”,毫秒值);</p>
</blockquote>
<p><strong>clearTimeout()：</strong> 取消由setTimeout()设置的timeout。<br></p>
<blockquote>
<p>clearTimeout(“js代码”,毫秒值);</p>
</blockquote>
<p><strong>setInterval()：</strong> 按照指定的周期（以毫秒计）来调用函数或计算表达式。<br></p>
<blockquote>
<p>var id = setInterval(id);</p>
</blockquote>
<p><strong>clearInterval()：</strong> 取消由setInterval()设置的timeout。<br></p>
<blockquote>
<p>clearInterval(id);</p>
</blockquote>
<p>轮播图小案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"pic"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> number = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">      number++;</span><br><span class="line">      if (number &gt; 3)&#123;</span><br><span class="line">        number = 1;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">"pic"</span>);</span></span><br><span class="line"><span class="actionscript">      pic.src = <span class="string">"images/pic"</span>+ number +<span class="string">".jpg"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    setInterval(fun,3000);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>属性<ol>
<li>获取其他BOM对象<br>history<br>location<br>navigator<br>screen</li>
<li>获取DOM对象<br>document</li>
</ol>
</li>
</ul>
<h6 id="Location：地址栏对象"><a href="#Location：地址栏对象" class="headerlink" title="Location：地址栏对象"></a>Location：地址栏对象</h6><ul>
<li><p>创建（获取）：</p>
<ol>
<li>window.location</li>
<li>location</li>
</ol>
</li>
<li><p>方法<br><br><strong>reload():</strong> 重新加载当前文档。</p>
</li>
<li><p>属性<br><br><strong>href：</strong> 设置或返回完整的URL。</p>
</li>
</ul>
<p>倒计时跳转页面小案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      p&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">      span&#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span>秒后跳转至首页...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> second = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> time = <span class="built_in">document</span>.getElementById(<span class="string">"time"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">tim</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">      second--;</span><br><span class="line">      if (second &lt;= 0)&#123;</span><br><span class="line"><span class="actionscript">        location.href = <span class="string">"https://www.baidu.com"</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      time.innerHTML = second + <span class="string">""</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    setInterval(tim,1000);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="History：历史记录对象"><a href="#History：历史记录对象" class="headerlink" title="History：历史记录对象"></a>History：历史记录对象</h6><ul>
<li><p>创建</p>
<ol>
<li>window.history</li>
<li>history</li>
</ol>
</li>
<li><p>方法</p>
<ol>
<li><strong>back()：</strong> 加载history列表中的前一个URL。<br></li>
<li><strong>forward()：</strong> 加载history列表中的下一个URL。<br></li>
<li><strong>go()：</strong> 加载history列表中的某个具体页面。<br><blockquote>
<p>history.go(1); //前进一个历史记录的页面（参数为负则倒退）</p>
</blockquote>
</li>
</ol>
</li>
<li><p>属性<br><br><strong>length：</strong> 返回当前窗口历史列表中的URL数量。<br></p>
</li>
</ul>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>Document Object Model 文档对象模型<br><br>W3C DOM标准被分为3个不同的部分：<br></p>
<ul>
<li>核心DOM：针对任何结构化文档的标准模型</li>
<li>XML DOM：针对XML文档的标准模型</li>
<li>HTML DOM：针对HTML文档的标准模型<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li>控制HTML文档的内容。<blockquote>
<p>document.getElementByID(“id值”) // 通过元素的id获取元素对象</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<ol start="2">
<li>操作Element对象：<ul>
<li>修改标签的属性值</li>
<li>修改标签体内容</li>
</ul>
</li>
</ol>
<h4 id="核心DOM模型"><a href="#核心DOM模型" class="headerlink" title="核心DOM模型"></a>核心DOM模型</h4><ul>
<li>Document：文档对象</li>
<li>Element：元素对象</li>
<li>Attribute：属性对象</li>
<li>Text：文本对象</li>
<li>Comment：注释对象</li>
<li>Node：节点对象（其他5个对象的父对象）</li>
</ul>
<h6 id="Document：文档对象"><a href="#Document：文档对象" class="headerlink" title="Document：文档对象"></a>Document：文档对象</h6><ul>
<li><p>创建（获取）：通过window来获取和创建</p>
<ol>
<li>window.document</li>
<li>document</li>
</ol>
</li>
<li><p>方法：</p>
<ol>
<li><p>获取Element对象</p>
<ol>
<li>getElementById()：根据id属性值获取元素对象。id属性值一般唯一。</li>
<li>getElementByTagName()：根据元素名称获取元素对象。返回值是一个数组。</li>
<li>getElementByClassName()：根据Class属性值获取元素对象。返回值是一个数组。</li>
<li>getElementByName()：根据name属性值获取元素对象。返回值是一个数组。</li>
</ol>
</li>
<li><p>创建其他DOM对象</p>
<ol>
<li>creatAttribute(name)</li>
<li>creatComment()</li>
<li>creatElement()</li>
<li>creatTextNode()</li>
</ol>
</li>
</ol>
</li>
</ul>
<h6 id="Element：元素对象"><a href="#Element：元素对象" class="headerlink" title="Element：元素对象"></a>Element：元素对象</h6><ul>
<li>创建：通过document来获取和创建</li>
<li>方法：<ol>
<li>removeAttribute()：删除属性</li>
<li>setAttribute()：设置属性</li>
</ol>
</li>
</ul>
<h6 id="Node：节点对象"><a href="#Node：节点对象" class="headerlink" title="Node：节点对象"></a>Node：节点对象</h6><p>是整个DOM的主要数据类型。节点对象代表文档树中的一个单独的节点。节点可以是元素节点、属性节点、文本节点等。</p>
<ul>
<li>方法：<br>  CRUD dom树：<pre><code>1. appendChild()：向节点的子节点列表结尾添加新的子节点
2. removeChild()：删除（并返回）当前节点的指定节点
3. replaceChild()：用新节点替换一个子结点</code></pre></li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol>
<li>功能：组件被执行了某些操作后，触发某些代码的执行。</li>
<li>如何绑定事件：<ul>
<li>直接在HTML标签上指定事件的属性（操作），属性值就是js代码。<br><br>例如onclick（单击事件）</li>
<li>通过js获取元素对象，指定事件属性，设置一个函数。<blockquote>
<p>document.getElementByID(“…”)</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h4 id="常见的事件"><a href="#常见的事件" class="headerlink" title="常见的事件"></a>常见的事件</h4><ol>
<li><p>点击事件：</p>
<ol>
<li>onclick：单击事件</li>
<li>ondblclick：双击事件</li>
</ol>
</li>
<li><p>焦点事件：</p>
<ol>
<li>onblur：失去焦点</li>
<li>onfocus：元素获得焦点</li>
</ol>
</li>
<li><p>加载事件：</p>
<ul>
<li>onload：一张页面或一幅图像完成加载</li>
</ul>
</li>
<li><p>鼠标事件：</p>
<ol>
<li>onmousedown：鼠标按钮被按下</li>
<li>onmouseup：鼠标按键被松开</li>
<li>onmousemove：鼠标被移开</li>
<li>onmouseover：鼠标移到某个元素之上</li>
<li>onmouseout：鼠标从某个元素移开</li>
</ol>
</li>
<li><p>键盘事件：</p>
<ol>
<li>onkeydown：某个键盘被按下</li>
<li>onkeyup：某个键盘被松开</li>
<li>onkeypress：某个键盘被按下并松开</li>
</ol>
</li>
<li><p>选中和改变：</p>
<ol>
<li>onchange：域的内容被改变</li>
<li>onselect：文本被选中</li>
</ol>
</li>
<li><p>表单事件：</p>
<ol>
<li>onsubmit：确认按钮被点击</li>
<li>onreset：重置按钮被点击</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JSP课程学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习笔记（一）</title>
    <url>/2020/02/26/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>客户端脚本语言，不需要编译直接就可以被浏览器解析执行。运行在客户端浏览器，每个浏览器都有JavaScript的解析引擎。<br>由ECMAScript、BOM和DOM构成。</p>
<h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><p>可以增强用户和HTML页面的交互过程，可以控制HTML元素，让页面有一些动态效果，增强用户体验。</p>
<a id="more"></a>

<h2 id="ECMAScript：客户端脚本语言标准。"><a href="#ECMAScript：客户端脚本语言标准。" class="headerlink" title="ECMAScript：客户端脚本语言标准。"></a>ECMAScript：客户端脚本语言标准。</h2><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ol>
<li><p>与HTML的结合方式</p>
<ul>
<li><p>内部js：定义&lt;script&gt;标签，在标签体中写js代码。</p>
<blockquote>
<p>&lt;script&gt;js代码</script></p>
</blockquote>
</li>
<li><p>外部js：定义&lt;script&gt;标签，通过src属性引入外部的js文件。</p>
<blockquote>
<p>&lt;script src=”文件名.js”&gt;</script></p>
</blockquote>
</li>
</ul>
<p><strong>注意：</strong>&lt;script&gt;标签可以定义在HTML页面的任意位置、也可以定义多个，但是定义的位置会影响执行顺序。</p>
</li>
<li><p>注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;单行注释</span><br><span class="line">&#x2F;*</span><br><span class="line">多行注释</span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>数据类型</p>
<ul>
<li>原始数据类型（基本数据类型）：<ol>
<li>number：数字。整数/小数/NaN</li>
<li>string：字符串。字符/字符串</li>
<li>boolean：true/false</li>
<li>null：一个对象为空的占位符</li>
<li>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li>
</ol>
</li>
<li>引用数据类型（对象）</li>
</ul>
</li>
<li><p>变量<br>JavaScript的变量是弱类型变量，在申请变量存储空间时不定义数据类型。<br><strong>语法：</strong></p>
<blockquote>
<p>var 变量名=变量值</p>
</blockquote>
</li>
<li><p>运算符</p>
<ul>
<li><p>一元运算符</p>
<ol>
<li>++：自增</li>
<li>–：自减</li>
<li>+(-)：正（负）号。在js中如果运算数不是运算所要求的类型，js引擎会自动将运算数进行类型转换。例如：<blockquote>
<p>var b = +”123”;  //原本b应该是字符串类型123，但是由于正号的转换，b变成了数值类型123<br>var a = +”abc”  //字符串abc会被转为NaN<br>var c = true  //转为1<br>var d = false //转为0</p>
</blockquote>
</li>
</ol>
</li>
<li><p>算术运算符<br><strong>+ 、- 、* 、/</strong></p>
</li>
<li><p>赋值运算符<br><strong>=</strong></p>
</li>
<li><p>比较运算符<br><strong>&gt; 、&lt; 、&gt;= 、&lt;= 、== 、===(全等于)</strong></p>
<ul>
<li><p>类型相同直接比较，字符串的比较按照字典顺序逐一比较，直到比出大小为止。</p>
<blockquote>
<p>3&gt;4  //false<br>“abc”&gt;”acd”  //第二位c大于b 返回false</p>
</blockquote>
</li>
<li><p>类型不同，先转换类型在比较</p>
<blockquote>
<p>“123”&gt;123  //false<br>“123”==123  //false  由于类型不同，不能直接比，返回false。此时要用===（全等于）</p>
</blockquote>
</li>
</ul>
</li>
<li><p>逻辑运算符<br><strong>&amp;&amp; 、|| 、!</strong><br>注意：其他类型转boolean</p>
<ol>
<li>number：0或NaN为false，其余为true</li>
<li>string：除了空字符串（””），其余为true</li>
<li>null&amp;undefined：都是假</li>
<li>对象：所有对象都是true</li>
</ol>
</li>
<li><p>三元运算符<br><strong>? 、:</strong></p>
<blockquote>
<p>var a = 3;<br> var b = 4;<br> var c = a &gt; b ? 1 : 0;  // 如果a&gt;b 则c=1，否则c=0</p>
</blockquote>
</li>
</ul>
</li>
<li><p>流程控制语句</p>
<ul>
<li>if …else…</li>
<li>switch 在js中可以接受任意类型的数据</li>
<li>while</li>
<li>do…while</li>
<li>for</li>
</ul>
</li>
</ol>
<ul>
<li><p>九九乘法表小项目：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>九九乘法表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      td&#123;</span><br><span class="line">         border: 1px solid;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.write(<span class="string">"&lt;table align='center'&gt;"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">"&lt;tr&gt;"</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.write(<span class="string">"&lt;td&gt;"</span>)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.write(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + (i*j) +<span class="string">"&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.write(<span class="string">"&lt;/td&gt;"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">"&lt;/tr&gt;"</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.write(<span class="string">"&lt;/table&gt;"</span>)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h4><h6 id="Function函数-方法-对象："><a href="#Function函数-方法-对象：" class="headerlink" title="Function函数(方法)对象："></a>Function函数(方法)对象：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var 方法名 = new Function(参数列表, 方法体);</p>
</blockquote>
<blockquote>
<p> function 方法名称（参数列表）{<br> 方法体<br>}</p>
</blockquote>
<blockquote>
<p>var 方法名称 = function(形式参数列表){<br>方法体<br>}</p>
</blockquote>
</li>
<li><p>方法</p>
</li>
<li><p>属性：</p>
<ul>
<li>length：代表形参个数</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li>方法定义时，形参的类型不用写,返回值也不用写。</li>
<li>方法是一个对象，定义名称相同的方法，会覆盖之前的。</li>
<li>在js中方法的调用值与方法名称有关，与参数列表无关。</li>
<li>在方法声明中，有一个隐藏的内置对象（数组），arguments封装所有的实际参数。<blockquote>
<p>求任意个数的和：</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function add()&#123;</span><br><span class="line">        var sum &#x3D; 0;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; arguments.length; i++)&#123;</span><br><span class="line">            sum +&#x3D; arguments[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">    var sum &#x3D; add(1, 2, 3, 4);</span><br><span class="line">    alert(sum);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>调用：</p>
<blockquote>
<p>方法名称（实际参数列表）;</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h6 id="Array："><a href="#Array：" class="headerlink" title="Array："></a>Array：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var arr = new Array(元素列表);</p>
</blockquote>
<blockquote>
<p> var arr = new Array(默认长度);</p>
</blockquote>
<blockquote>
<p>var arr = [元素列表];</p>
</blockquote>
</li>
<li><p>方法：</p>
<ul>
<li>join()： 将数组中的元素按照指定的分隔符拼接为字符串</li>
<li>push()：列表末尾进行追加</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>length：代表数组的长度</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li>JS中，数组元素的类型可变</li>
<li>JS中，数组的长度可变</li>
</ul>
</li>
</ol>
<h6 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h6><h6 id="Date："><a href="#Date：" class="headerlink" title="Date："></a>Date：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var date = new Date();</p>
</blockquote>
</li>
<li><p>方法：</p>
<ul>
<li>toLocaleString()：返回当前date对象对应的时间本地字符串格式</li>
<li>getTime()：返回当前日期对象描述的时间至1970年1月1日零点的毫秒值差（用于时间戳）</li>
</ul>
</li>
</ol>
<h6 id="Math："><a href="#Math：" class="headerlink" title="Math："></a>Math：</h6><ol>
<li>方法：<ul>
<li>random()：返回0~1的随机数</li>
<li>ceil(x)：对数字向上取整</li>
<li>floor(x)：对数字向下取整</li>
<li>round(x)：把数字四舍五入为最接近的整数</li>
</ul>
</li>
<li>属性：<ul>
<li>PI：圆周率</li>
</ul>
</li>
<li>特点：<br>Math对象不用创建，直接使用。</li>
</ol>
<h6 id="Number："><a href="#Number：" class="headerlink" title="Number："></a>Number：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var arr = new Array(元素列表);</p>
</blockquote>
</li>
<li><p>方法：</p>
</li>
<li><p>属性：</p>
<ul>
<li>length：代表数组的长度</li>
</ul>
</li>
<li><p>特点：</p>
</li>
</ol>
<h6 id="String："><a href="#String：" class="headerlink" title="String："></a>String：</h6><h6 id="RegExp："><a href="#RegExp：" class="headerlink" title="RegExp："></a>RegExp：</h6><p><strong>正则表达式：</strong> 定义字符串的组成规则。</p>
<ol>
<li>单个字符：[]<br>如：[a] [ab] [a-zA-Z0-9]<br>特殊符号代表特殊含义的单个字符：<ul>
<li>\d：单个数字字符[0-9]</li>
<li>\w：单个单词字符[a-zA-Z0-9]</li>
</ul>
</li>
<li>量词符号：<ul>
<li>?：表示出现0次或1次</li>
<li>*：表示出现0次或多次</li>
<li>+：表示出现1次或多次</li>
<li>{m,n}：表示m&lt;=数量&lt;=n<ul>
<li>m如果缺省{,n}：最多n次</li>
<li>n如果缺省{m,}：最少n次</li>
</ul>
</li>
</ul>
</li>
<li>开始结束符号：<ul>
<li>^：开始</li>
<li>$：结束</li>
</ul>
</li>
</ol>
<p><strong>正则对象：</strong></p>
<ol>
<li><p>创建</p>
<blockquote>
<p>var reg = new RegExp(“正则表达式”);</p>
</blockquote>
<blockquote>
<p>var reg = /正则表达式/;</p>
</blockquote>
</li>
<li><p>方法</p>
<ul>
<li>test()：验证指定的字符串是否符合定义的规范，返回值为Boolean</li>
</ul>
</li>
</ol>
<h6 id="Global"><a href="#Global" class="headerlink" title="Global:"></a>Global:</h6><ol>
<li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。方法名();</p>
</li>
<li><p>方法：</p>
<ul>
<li><p>encodeURI()：URL编码，只对汉字进行编码</p>
</li>
<li><p>decodeURI()：URL解码</p>
</li>
<li><p>encodeURIComponent()：URL编码，编码的字符更多</p>
</li>
<li><p>dncodeURIComponent()：URL解码</p>
</li>
<li><p>parseInt()：将字符串转为数字。逐一判断每一个字符是否为数字，直到不是数字位置，将前边数字部分转为number。</p>
<blockquote>
<p>“123” –&gt; 123<br>“123abc”  –&gt; 123</p>
</blockquote>
</li>
<li><p>isNaN()：判断一个值是否是NaN。NaN参与的==比较返回结果均为false，只能通过该方法判断。</p>
</li>
<li><p>eval()：将JavaScript的字符串转为脚本并执行。</p>
<blockquote>
<p>var jscode = “alert(123)”;  //原本为字符串<br>eval(jscode);  //通过eval()方法解析字符串片段</p>
</blockquote>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JSP课程学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML标签回顾</title>
    <url>/2020/02/19/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h4><ol>
<li>i：斜体</li>
<li>b：加粗</li>
<li>font：字体标签</li>
<li>结合CSS使用的标签</li>
<li>div：每一个div占满一整行。块级标签。</li>
</ol>
<a id="more"></a>

<h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><ol>
<li>table：表格<ul>
<li>width 宽度</li>
<li>border 边框</li>
<li>cellpadding 定义内容与单元格之间的距离</li>
<li>cellspacing 定义单元格之间的距离</li>
</ul>
</li>
<li>tr：行</li>
<li>td：单元格<ul>
<li>colspan：合并列</li>
<li>rowspan：合并行</li>
</ul>
</li>
<li>th：表头单元格（内容会自动居中并加粗）</li>
<li>&lt;caption&gt;：表格标题，在表格上方、剧中</li>
<li>&lt;thead&gt;：表示表格的头部份</li>
<li>&lt;tbody&gt;：表示表格的体部份</li>
<li>&lt;tfoot&gt;：表示表格的脚部份</li>
</ol>
<h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><p>form：用于定义表单。可定义一个代表采集用户数据的范围。</p>
<ol>
<li><p>action：指定提交数据的URL</p>
</li>
<li><p>method：指定提交方式</p>
<ul>
<li>get：<ol>
<li>请求参数会在地址栏中显示，会封装到请求行中</li>
<li>请求参数大小有限制</li>
<li>不太安全</li>
</ol>
</li>
<li>post：<ol>
<li>请求参数不会在地址栏中显示，会封装到请求行中</li>
<li>请求参数大小没有限制</li>
<li>较为安全</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h4><p><strong>input：可以通过type属性值改变元素展示样式。</strong></p>
<h6 id="type"><a href="#type" class="headerlink" title="type"></a>type</h6><ul>
<li>text：文本框<ul>
<li>placeholder：指定输入框的提示信息，当输入框内容发生变化，会自动清空提示信息</li>
</ul>
</li>
<li>password：密码框</li>
<li>radio：单选框<ol>
<li>要想实现单选，name属性值要一致</li>
<li>给每个单选框提供value属性，指定其被选中后提交的值</li>
<li>checked属性，可以指定默认值</li>
</ol>
</li>
<li>check：复选框<ol>
<li>要想实现选择，name属性值要一致</li>
<li>给每个复选框提供value属性，指定其被选中后提交的值</li>
<li>checked属性，可以指定默认值</li>
</ol>
</li>
<li>file：文件选择框</li>
<li>hidden：隐藏域</li>
<li>按钮：<ol>
<li>submit：提交按钮，用于提交表单</li>
<li>button：普通按钮</li>
<li>image：图片提交按钮。</li>
</ol>
<strong>lable：标签。其中的for属性一般会和inpu的id属性值对应。</strong><br><strong>select：下拉列表</strong><ul>
<li>option：定义可选的列表项</li>
</ul>
<strong>textarea：文本域</strong></li>
</ul>
]]></content>
      <categories>
        <category>HTML标签</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP学习笔记</title>
    <url>/2020/02/10/JSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="WEB-INFO目录结构"><a href="#WEB-INFO目录结构" class="headerlink" title="WEB-INFO目录结构"></a>WEB-INFO目录结构</h2><p><strong>WEB-INF</strong> 是Java的WEB应用的安全目录，客户端上访问不到，只有服务端才能访问。<br><strong>web.xml</strong> 是项目部署文件。<br><strong>class文件夹</strong> 用于存放.class文件。<br><strong>lib文件夹</strong> 存放项目所需jar包.</p>
<a id="more"></a>

<h2 id="JSP页面元素构成"><a href="#JSP页面元素构成" class="headerlink" title="JSP页面元素构成"></a>JSP页面元素构成</h2><h6 id="静态内容"><a href="#静态内容" class="headerlink" title="静态内容"></a>静态内容</h6><p>HTML静态文件体</p>
<h6 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h6><ul>
<li>page指令： 位于jsp页面顶端，同一个页面可以有多个page指令。</li>
<li>language：指定jsp页面使用的脚本语言，默认为Java。</li>
<li>import：引用脚本中使用到的类文件。</li>
<li>contentType：指定jsp页面编码方式，默认为text/html，ISO-8859-1。</li>
<li>include指令：将一个外部文件嵌入到当前jsp文件中，并解析页面中的jsp语句。</li>
<li>taglib指令：使用标签库定义新的标签，在jsp页面中启用定制行为。</li>
</ul>
<p><strong>示例：</strong><br>       <code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code></p>
<h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><p>​    HTML注释：<br>​        <code>&lt;!-- html注释，客户端可见 --&gt;</code><br>​    JSP注释：<br>​        <code>&lt;%-- jsp注释，客户端不可见 --%&gt;</code><br>​    JSP脚本中可使用Java注释。</p>
<h6 id="小脚本"><a href="#小脚本" class="headerlink" title="小脚本"></a>小脚本</h6><p><code>&lt;%out.println(&quot;这是jsp脚本&quot;)%&gt;</code></p>
<h6 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h6><p>在jsp页面中定义变量或者发方法。<br><code>&lt;! String s = &quot;张三&quot;;&gt;</code></p>
<h6 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h6><p>在jsp页面中执行的表达式。<br><code>&lt;%=1+1 %&gt; //注意表达式后面不写;</code></p>
<h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><p>jsp内置对象是web容器创建的一组对象，不使用new关键词就可以使用的内置对象，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span>[] value = &#123;<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i:value)&#123;</span><br><span class="line">            out.println(i);  <span class="comment">// out就是内置对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br></pre></td></tr></table></figure>
<h4 id="jsp九大内置对象"><a href="#jsp九大内置对象" class="headerlink" title="jsp九大内置对象"></a>jsp九大内置对象</h4><h6 id="常用的五个"><a href="#常用的五个" class="headerlink" title="常用的五个:"></a>常用的五个:</h6><ol>
<li><strong>out：</strong> JspWriter类的实例，向客户端输出内容的常用对象。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>out内置对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    缓冲区大小：<span class="tag">&lt;<span class="name">%=out.getBufferSize()%</span>&gt;</span>byte<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    缓冲区剩余大小：<span class="tag">&lt;<span class="name">%=out.getRemaining()%</span>&gt;</span>byte<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    是否自动清空缓冲区：<span class="tag">&lt;<span class="name">%=out.isAutoFlush()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<strong>预览效果：</strong><br><img src="/images/jspStudy/out.png" alt="图片加载失败"></li>
<li><strong>request：</strong> HttpServletRequest类的实例。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>requesr内置对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Request内置对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">            // 设置请求默认的编码，解决页面中文乱码问题</span></span><br><span class="line"><span class="tag">            <span class="attr">request.setCharacterEncoding</span>("<span class="attr">UTF-8</span>");</span></span><br><span class="line"><span class="tag">            // 存储此请求中的属性</span></span><br><span class="line"><span class="tag">            <span class="attr">request.setAttribute</span>("<span class="attr">passwd</span>", "<span class="attr">123456</span>");</span></span><br><span class="line"><span class="tag">        %&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">%=request.getParameter("username")</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好：<span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">            <span class="attr">if</span> (<span class="attr">request.getParameterValues</span>("<span class="attr">favorite</span>")!=<span class="string">null)</span> &#123;</span></span><br><span class="line"><span class="tag">                <span class="attr">String</span>[] <span class="attr">favorites</span> = <span class="string">request.getParameterValues(</span>"<span class="attr">favorite</span>");</span></span><br><span class="line">                for (int i = 0; i &lt; favorites.length; i++) &#123;</span><br><span class="line">                    out.println(favorites[i] + "&amp;nbsp<span class="symbol">&amp;nbsp;</span>");</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            %&gt;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码： <span class="tag">&lt;<span class="name">%=request.getAttribute("passwd")%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请求体的MIME类型：<span class="tag">&lt;<span class="name">%=request.getContentType()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        协议类型及版本号：<span class="tag">&lt;<span class="name">%=request.getProtocol()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        服务器主机名：<span class="tag">&lt;<span class="name">%=request.getServerName()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        服务器端口号：<span class="tag">&lt;<span class="name">%=request.getServerPort()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请求文件的长度：<span class="tag">&lt;<span class="name">%=request.getContentLength()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请求客户端的IP地址：<span class="tag">&lt;<span class="name">%=request.getRemoteAddr()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请求的上下文路径：<span class="tag">&lt;<span class="name">%=request.getContextPath()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p> <strong>预览效果：</strong><br> <img src="/images/jspStudy/request.png" alt="图片加载失败"><br> 3. <strong>response：</strong> HttpServletResponse类的实例。<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">response.setContentType</span>("<span class="attr">text</span>/<span class="attr">html</span>; <span class="attr">charset</span>=<span class="string">utf-8</span>");</span></span><br><span class="line">    out.print("&lt;h1&gt;response内置对象&lt;/h1&gt;");</span><br><span class="line">    out.print("<span class="tag">&lt;<span class="name">hr</span>&gt;</span>");</span><br><span class="line">    PrintWriter outer = response.getWriter(); //获得输出流对象，</span><br><span class="line">    // response对象获得的writer对象输出打印时提前于内置out对象</span><br><span class="line">    outer.println("response对象生成的输出流outer对象");</span><br><span class="line">    out.print("<span class="tag">&lt;<span class="name">br</span>&gt;</span>");</span><br><span class="line">    out.print("<span class="tag">&lt;<span class="name">h1</span>&gt;</span>response内置对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>");</span><br><span class="line">    out.print("<span class="tag">&lt;<span class="name">hr</span>&gt;</span>");</span><br><span class="line">    out.flush();</span><br><span class="line">    PrintWriter outer1 = response.getWriter(); //获得输出流对象，</span><br><span class="line">    // response对象获得的writer对象输出打印时提前于内置out对象</span><br><span class="line">    outer.println("response对象生成的输出流outer对象");</span><br><span class="line">//    response.sendRedirect("request.jsp");  //请求重定向</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><br> <strong>预览效果：</strong><br> <img src="/images/jspStudy/response.png" alt="图片加载失败"><br> 4. <strong>session：</strong> 客户端与服务器的一次对话，从第一次打开客户端到其完全关闭的一段时间。<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>session内置对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>session内置对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">SimpleDateFormat</span> <span class="attr">sdf</span> = <span class="string">new</span> <span class="attr">SimpleDateFormat</span>("<span class="attr">yyy</span>年<span class="attr">MM</span>月<span class="attr">dd</span>日 <span class="attr">HH:mm:ss</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">Date</span> <span class="attr">d</span> = <span class="string">new</span> <span class="attr">Date</span>(<span class="attr">session.getCreationTime</span>());</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    Session创建时间：<span class="tag">&lt;<span class="name">%=sdf.format(d)%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Session的ID编号：<span class="tag">&lt;<span class="name">%=session.getId()%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br> <strong>预览效果：</strong><br> <img src="/images/jspStudy/session.png" alt="图片加载失败"><br> 5. <strong>application：</strong> 实现用户间数据的共享，可存放全局变量。开始于服务器的启动，终止于服务器的关闭。在用户的前后链接或不同用户之间的连接中，可以对application对象的同意属性进行操作。<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.Enumeration"</span> %&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>application内置对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>application内置对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">application.setAttribute</span>("<span class="attr">city</span>", "北京");</span></span><br><span class="line"><span class="tag">        <span class="attr">application.setAttribute</span>("<span class="attr">postcode</span>", "<span class="attr">10000</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">application.setAttribute</span>("<span class="attr">email</span>", "<span class="attr">lisi</span>@<span class="attr">163.com</span>");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    所在的城市：<span class="tag">&lt;<span class="name">%=application.getAttribute("city")%</span>&gt;</span></span><br><span class="line">    中的属性有：<span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Enumeration</span> <span class="attr">attributes</span> = <span class="string">application.getAttributeNames();</span></span></span><br><span class="line"><span class="tag">        <span class="attr">while</span> (<span class="attr">attributes.hasMoreElements</span>())</span></span><br><span class="line"><span class="tag">        &#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">out.println</span>(<span class="attr">attributes.nextElement</span>()+"&amp;<span class="attr">nbsp</span>&amp;<span class="attr">nbsp</span>");</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    %&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    JSP(SERVLET)引擎名及版本号：<span class="tag">&lt;<span class="name">%=application.getServerInfo()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br> <strong>预览效果：</strong><br> <img src="/images/jspStudy/application.png" alt="图片加载失败"></p>
<h6 id="不常用的"><a href="#不常用的" class="headerlink" title="不常用的:"></a>不常用的:</h6><ol start="6">
<li><strong>page：</strong> 当前JSP页面本身，有点像类中的this指针。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>page内置对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>page内置对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    当前page页面对象的字符串描述：<span class="tag">&lt;<span class="name">%=page.toString()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/page.png" alt="图片加载失败"><br>7. <strong>pageContext ：</strong> 提供了对JSP页面内所有的对象及名字空间的访问。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>pageContext<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>pageContext内置对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    session_page1中的用户名是：<span class="tag">&lt;<span class="name">%=pageContext.getSession().getAttribute("username")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //跳转到注册页面</span></span><br><span class="line"><span class="tag">        //<span class="attr">pageContext.forward</span>("<span class="attr">reg.jsp</span>");</span></span><br><span class="line"><span class="tag">        //一个页面包含另一个页面</span></span><br><span class="line"><span class="tag">        <span class="attr">pageContext.include</span>("<span class="attr">include.jsp</span>");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>include.jsp</em></p>
<h6 id="includ指令"><a href="#includ指令" class="headerlink" title="includ指令"></a>includ指令</h6><p><code>&lt;%@include file=&quot;URL&quot;%&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.Date"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"ja&lt;%@ page contentType="</span><span class="attr">text</span>/<span class="attr">html</span>;<span class="attr">charset</span>=<span class="string">UTF-8</span>" <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></span></span><br><span class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()+</span>"<span class="attr">:</span>//"+<span class="attr">request.getServerName</span>()+"<span class="attr">:</span>"+<span class="attr">request.getServerPort</span>()+<span class="attr">path</span>+"/";</span></span><br><span class="line"><span class="tag">    <span class="attr">Date</span> <span class="attr">date</span> = <span class="string">new</span> <span class="attr">Date</span>();</span></span><br><span class="line"><span class="tag">    <span class="attr">SimpleDateFormat</span> <span class="attr">sdf</span> = <span class="string">new</span> <span class="attr">SimpleDateFormat</span>("<span class="attr">yyyy</span>年<span class="attr">MM</span>月<span class="attr">dd</span>日");</span></span><br><span class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">s</span> = <span class="string">sdf.format(date);</span></span></span><br><span class="line">    out.println(s+"&lt;br&gt;");</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/pageContext.png" alt="图片加载失败"><br>8. <strong>exception：</strong> 是一个异常对象，当一个页面在运行过程中发生了异常，就产生这个对象。如果一个jsp页面要应用此对象，就必须把isErrorPage设定为true，否则无法编译。<br>想要查看该内置对象的实际效果，创建一个exception.jsp文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">isErrorPage</span>=<span class="string">"true"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>exception<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>exception内置对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    异常消息是：<span class="tag">&lt;<span class="name">%=exception.getMessage()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    异常的字符串描述：<span class="tag">&lt;<span class="name">%=exception.toString()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过exception测试页面来查看（需要新建一个exceptionTest.jsp）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">errorPage</span>=<span class="string">"exception.jsp"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>exceptionTest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试异常的页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //在最上方添加<span class="attr">errorPage</span>=<span class="string">"exceptionTest.jsp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">System.out.println</span>(<span class="attr">100</span>/<span class="attr">0</span>); //抛出异常</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/exception.png" alt="图片加载失败"><br>9. <strong>config：</strong> 在Servlet初始化时，jsp引擎向它传递信息用的，此信息包括Servlet初始化时需要用到的参数（通过属性名和属性值构成）以及服务器的有关信息（通过传递一个ServletContext对象）。<br>​    <strong>请求重定向：</strong> 客户端行为，response.sendRedirect()，从本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的URL地址会改变。<br>​    <strong>请求转发：</strong> 服务器行为，request.getRequestDispatcher().forward(req,resp)，是一次请求，转发后请求对象保存，地址栏的URL地址不会改变。</p>
<h4 id="include指令和include动作标签"><a href="#include指令和include动作标签" class="headerlink" title="include指令和include动作标签"></a>include指令和include动作标签</h4><h6 id="includ指令-1"><a href="#includ指令-1" class="headerlink" title="includ指令"></a><a href="#includ指令">includ指令</a></h6><h6 id="include动作标签"><a href="#include动作标签" class="headerlink" title="include动作标签"></a>include动作标签</h6><p><code>&lt;jsp:include page=&quot;URL&quot; flush=&quot;true|false&quot; /&gt;</code></p>
<ul>
<li><strong>page：</strong> 要包含的页面</li>
<li><strong>flush：</strong> 被包含的页面是否从缓冲区读取(默认为false)</li>
</ul>
<p><em>include_action.jsp</em> 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>includeAction<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>include动作<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"date.jsp"</span> <span class="attr">flush</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>date.jsp</em> 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">import</span>=<span class="string">"java.text.*"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Date</span> <span class="attr">d</span> = <span class="string">new</span> <span class="attr">Date</span>();</span></span><br><span class="line"><span class="tag">    <span class="attr">SimpleDateFormat</span> <span class="attr">sdf</span> = <span class="string">new</span> <span class="attr">SimpleDateFormat</span>("<span class="attr">yyyy</span>年<span class="attr">MM</span>月<span class="attr">dd</span>日");</span></span><br><span class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">s</span> = <span class="string">sdf.format(d);</span></span></span><br><span class="line"><span class="tag">    <span class="attr">out.println</span>(<span class="attr">s</span>);</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/include_action.png" alt="图片加载失败"></p>
<h6 id="include指令和include动作比较"><a href="#include指令和include动作比较" class="headerlink" title="include指令和include动作比较"></a>include指令和include动作比较</h6><table>
<thead>
<tr>
<th></th>
<th align="center">includ指令</th>
<th align="center">jsp:include动作</th>
</tr>
</thead>
<tbody><tr>
<td>语法格式</td>
<td align="center">&lt;%@ include file=”..” %&gt;</td>
<td align="center">&lt;jsp:include page=”..” &gt;</td>
</tr>
<tr>
<td>发生作用的时间</td>
<td align="center">页面转换期间</td>
<td align="center">请求期间</td>
</tr>
<tr>
<td>包含的内容</td>
<td align="center">文件的实际内容</td>
<td align="center">页面的输出</td>
</tr>
<tr>
<td>转换成的Servlet</td>
<td align="center">主页面和包含页面转换为一个Servlet</td>
<td align="center">主页面和包含页面转换为独立的Servlet</td>
</tr>
<tr>
<td>编译时间</td>
<td align="center">较慢——资源必须被解析</td>
<td align="center">较快</td>
</tr>
<tr>
<td>执行时间</td>
<td align="center">稍快</td>
<td align="center">较慢——每次资源必须被解析</td>
</tr>
</tbody></table>
<h4 id="forward动作"><a href="#forward动作" class="headerlink" title="forward动作"></a>forward动作</h4><p><strong>语法：</strong><br><code>&lt;jsp:forward page=&quot;URL&quot; /&gt;</code><br><strong>等同于：</strong><br><code>request.getRequestDispatcher(&quot;/url&quot;).forward(request,response);</code><br>首先创建<em>login.jsp</em>文件,将action提交给<em>forward.jsp</em>处理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>系统登陆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"forward.jsp"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建<em>forward.jsp</em>文件，使用forward动作提交给<em>user.jsp</em>进行处理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>forward动作<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"user.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>user.jsp</em> 文件用于获取用户登陆信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户资料<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用户资料<span class="tag">&lt;/<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">request.setCharacterEncoding</span>("<span class="attr">utf-8</span>");%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">username</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">password</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">request.getParameter</span>("<span class="attr">username</span>")!=<span class="string">null)&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">username</span> = <span class="string">request.getParameter(</span>"<span class="attr">username</span>");</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">request.getParameter</span>("<span class="attr">password</span>")!=<span class="string">null)&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">password</span> = <span class="string">request.getParameter(</span>"<span class="attr">password</span>");</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">%=username</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">%=password</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/forward.png" alt="图片加载失败"></p>
<h4 id="param动作"><a href="#param动作" class="headerlink" title="param动作"></a>param动作</h4><p><code>&lt;jsp:param name=&quot;参数名&quot; value=&quot;参数值&quot;&gt;</code><br>常常和&lt;jsp:forward &gt;一起使用，作为其子标签。<br>将<em>login.jsp<em>中的action对象</em>forward.jsp<em>改为</em>dologin.jsp</em>,然后新建一个<em>dologin.jsp</em>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">"user.jsp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">value</span>=<span class="string">"admin@163.com"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<em>user.jsp</em>文件中加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String email &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">if (request.getParameter(&quot;email&quot;)!&#x3D;null)&#123;</span><br><span class="line">           email &#x3D; request.getParameter(&quot;email&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">电子邮箱：&lt;%&#x3D;email %&gt;</span><br></pre></td></tr></table></figure>
<p>该过程是为了演示param的作用,虽然用户登陆时提交的表单信息中没有<em>email</em>内容，但是用过param可以进行赋值。<br><strong>预览效果：</strong><br><img src="/images/jspStudy/param.png" alt="图片加载失败"></p>
<h4 id="Cookie：是web服务器保存在客户端的一系列文本信息。"><a href="#Cookie：是web服务器保存在客户端的一系列文本信息。" class="headerlink" title="Cookie：是web服务器保存在客户端的一系列文本信息。"></a>Cookie：是web服务器保存在客户端的一系列文本信息。</h4><p>典型应用一：判定注册用户是否已经登陆网站。<br>典型应用二:“购物车”的处理。<br>生活中Cookie的应用：浏览记录、记住用户名和密码实现自动登录</p>
<h6 id="Cookie的作用："><a href="#Cookie的作用：" class="headerlink" title="Cookie的作用："></a>Cookie的作用：</h6><ul>
<li>对特定对象的追踪</li>
<li>保存用户网页浏览记录与习惯</li>
<li>简化登录<br>安全风险：容易泄露用户信息<h6 id="jsp中创建和使用Cookie"><a href="#jsp中创建和使用Cookie" class="headerlink" title="jsp中创建和使用Cookie"></a>jsp中创建和使用Cookie</h6>创建Cookie对象<br><code>Cookie newCookie = new Cookie(String key, Object value);</code><br>写入Cookie对象<br><code>response.addCookie(newCookie);</code><br>读取Cookie对象<br><code>Cookie[] cookie = request.getCookies();</code></li>
</ul>
<p><strong>常用方法：</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void setMaxAge(int expiry)</td>
<td>设置cookie的有效期，单位是秒</td>
</tr>
<tr>
<td>void setValue(String vlaue)</td>
<td>在cookie创建后，对cookie进行赋值</td>
</tr>
<tr>
<td>String setName()</td>
<td>获取cookie的名称</td>
</tr>
<tr>
<td>String grtValue()</td>
<td>获取cookie的值</td>
</tr>
<tr>
<td>int getMaxAge()</td>
<td>获取cookie的有效时间，单位是秒</td>
</tr>
</tbody></table>
<h6 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h6><ul>
<li><p>登陆界面：<em>login.jsp</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">import</span>=<span class="string">"java.net.*"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">request.setCharacterEncoding</span>("<span class="attr">utf-8</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">username</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">password</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">Cookie</span>[] <span class="attr">cookies</span> = <span class="string">request.getCookies();</span></span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">cookies</span>!=<span class="string">null&amp;&amp;cookies.length</span>&gt;</span>0)&#123;</span><br><span class="line">            for (Cookie c:cookies)&#123;</span><br><span class="line">                if (c.getName().equals("username"))&#123;</span><br><span class="line">                    username = URLDecoder.decode(c.getValue(), "utf-8");</span><br><span class="line">                &#125;</span><br><span class="line">                if (c.getName().equals("password"))&#123;</span><br><span class="line">                    password = URLDecoder.decode(c.getValue(), "utf-8");</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"dologin.jsp"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"&lt;%=username %&gt;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"&lt;%=password %&gt;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"isCookie"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span>十天内记住我的登陆状态<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>登陆处理：<em>dologin.jsp</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">import</span>=<span class="string">"java.net.*"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>登陆成功<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">request.setCharacterEncoding</span>("<span class="attr">utf-8</span>");</span></span><br><span class="line"><span class="tag">        //先判断是否选择了记住登陆状态</span></span><br><span class="line"><span class="tag">        <span class="attr">String</span>[] <span class="attr">isCookie</span> = <span class="string">request.getParameterValues(</span>"<span class="attr">isCookie</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">isCookie</span>!=<span class="string">null&amp;&amp;isCookie.length</span>&gt;</span>0)&#123;</span><br><span class="line">            // 把用户名和密码保存在Cookie对象中</span><br><span class="line">            // 使用URLEncoder.encode()方法将Cookie中用户名或者密码的中文进行编码</span><br><span class="line">            String username = URLEncoder.encode(request.getParameter("username"), "utf-8");</span><br><span class="line">            String password = URLEncoder.encode(request.getParameter("password"), "utf-8");</span><br><span class="line"></span><br><span class="line">            Cookie usernameCookie = new Cookie("username", username);</span><br><span class="line">            Cookie passwordCookie = new Cookie("password", password);</span><br><span class="line"></span><br><span class="line">            // 设置Cookie最大生存时间</span><br><span class="line">            usernameCookie.setMaxAge(486000);</span><br><span class="line">            passwordCookie.setMaxAge(486000);</span><br><span class="line"></span><br><span class="line">            // 将数据保存到Cookie对象中</span><br><span class="line">            response.addCookie(usernameCookie);</span><br><span class="line">            response.addCookie(passwordCookie);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // 不勾选记住登陆状态时的操作</span><br><span class="line">            Cookie[] cookies = request.getCookies();</span><br><span class="line">            if (cookies!=null&amp;&amp;cookies.length&gt;0)&#123;</span><br><span class="line">                for (Cookie c:cookies)&#123;</span><br><span class="line">                    if (c.getName().equals("username")||c.getName().equals("password"))&#123;</span><br><span class="line">                        c.setMaxAge(0);// 设置cookie失效</span><br><span class="line">                        response.addCookie(c);//重新保存</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"users.jsp"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>查看用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>用户界面：<em>users.jsp</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">import</span>=<span class="string">"java.net.*"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">request.setCharacterEncoding</span>("<span class="attr">utf-8</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">username</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">password</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">        <span class="attr">Cookie</span>[] <span class="attr">cookies</span> = <span class="string">request.getCookies();</span></span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">cookies</span>!=<span class="string">null&amp;&amp;cookies.length</span>&gt;</span>0)&#123;</span><br><span class="line">            for (Cookie c:cookies)&#123;</span><br><span class="line">                if (c.getName().equals("username"))&#123;</span><br><span class="line">                    // 解码</span><br><span class="line">                    username = URLDecoder.decode(c.getValue(), "utf-8");</span><br><span class="line">                &#125;</span><br><span class="line">                if (c.getName().equals("password"))&#123;</span><br><span class="line">                    password = URLDecoder.decode(c.getValue(), "utf-8");</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">%=username</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">%=password</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先我们来看一下登陆界面（由于测试的目标仅是Cookie的作用，并未涉及到登陆验证）<br><img src="/images/jspStudy/login_Cookie.png" alt="图片加载失败"><br>由于这是第一次启动该项目，表单中并没有数据。我们填入相应信息，取消勾选记住登陆状态，然后尝试登陆-点击“查看用户信息”。弹出的页面并未显示用户数据：<br><img src="/images/jspStudy/userInfo1.png" alt="图片加载失败"><br>关闭浏览器客户端，再次打开登陆界面：<br><img src="/images/jspStudy/login_Cookie.png" alt="图片加载失败"><br>重新填写登录信息，此次勾选记住登陆状态，重复上述步骤：<br><img src="/images/jspStudy/userInfo2.png" alt="图片加载失败"><br>重新打开的登陆界面包含了上次登录的用户信息：<br><img src="/images/jspStudy/login_Cookie2.png" alt="图片加载失败"></p>
</li>
</ul>
<h6 id="Session和Cookie对比"><a href="#Session和Cookie对比" class="headerlink" title="Session和Cookie对比"></a>Session和Cookie对比</h6><table>
<thead>
<tr>
<th>Session</th>
<th>Cookie</th>
</tr>
</thead>
<tbody><tr>
<td>在<strong>服务器端</strong>保存用户信息</td>
<td>在<strong>客户端</strong>保存用户信息</td>
</tr>
<tr>
<td>Session中保存的是<strong>Object</strong>类型</td>
<td>Cookie保存的是<strong>String</strong>类型</td>
</tr>
<tr>
<td>随会话的结束而将其存储的数据<strong>销毁</strong></td>
<td>可以<strong>长期</strong>保存在客户端</td>
</tr>
<tr>
<td>保存<strong>重要</strong>信息</td>
<td>保存<strong>不重要</strong>的用户信息</td>
</tr>
</tbody></table>
<h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>Javabeans就是符合某种特定的规范的Java类。使用Javabeans的好处是解决代码重复编写，减少代码冗余，功能区分明确，提高了代码的维护性。</p>
<h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul>
<li>公有类</li>
<li>无参的公有构造方法</li>
<li>属性私有</li>
<li>getter和setter方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公有类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="comment">//无参的公有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;<span class="keyword">this</span>.name=name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;<span class="keyword">this</span>.age=age;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.age;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="什么是JSP动作"><a href="#什么是JSP动作" class="headerlink" title="什么是JSP动作"></a>什么是JSP动作</h4>JSP动作元素（action elements），动作元素为请求处理阶段提供信息。动作元素遵循XML元素的语法，有一个包含元素名的开始标签，可以有属性、可选内容、与开始标签匹配的结束标签。</li>
<li>第一类是与存取JavaBean有关的，包括：<br> &lt;jsp:useBean&gt; &lt;jsp:setProperty&gt;&lt;jsp:getProperty&gt;</li>
<li>第二类是JSP1.2就看似是有的基本元素，包括6个动作元素：<br>&lt;jsp:include&gt;&lt;jsp:forward&gt;&lt;jsp:param&gt;&lt;jsp:plugin&gt;&lt;jsp:params&gt;&lt;jsp:fallback&gt;</li>
<li>第三类是JSP2.0新增加的元素，主要与JSP Document有关，包括6个元素：<br>&lt;jsp:root&gt;&lt;jsp:declaration&gt;&lt;jsp:scriptlet&gt;&lt;jsp:expression&gt;&lt;jsp:text&gt;&lt;jsp:output&gt;</li>
<li>第四类是JSP2.0新增的动作元素，主要用来动态生成XML元素标签的值，包括3个动作：<br>&lt;jsp:attribute&gt;&lt;jsp:body&gt;&lt;jsp:element&gt;</li>
<li>第五类是JSP2.0新增的动作元素，主要是用在Tag File中，有2个元素：<br>&lt;jsp:invoke&gt;&lt;jsp:dobody<h6 id="1-用普通方式创建JavaBean实例："><a href="#1-用普通方式创建JavaBean实例：" class="headerlink" title="1.用普通方式创建JavaBean实例："></a>1.用普通方式创建JavaBean实例：</h6></li>
<li>首先在src下建立实体类</li>
<li>在jsp文件中使用page指令import实体类<br>用户实体类：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用内置对象调用JavaBean实例中的属性<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"com.po.User"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用普通方式创建JavaBean的实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">      <span class="attr">User</span> <span class="attr">user</span> = <span class="string">new</span> <span class="attr">User</span>();</span></span><br><span class="line"><span class="tag">      <span class="attr">user.setUsername</span>("<span class="attr">admin</span>");</span></span><br><span class="line"><span class="tag">      <span class="attr">user.setPassword</span>("<span class="attr">123456</span>");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>使用普通方式创建JavaBean的实例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">%=user.getUsername()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">%=user.getPassword()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/index.png" alt="图片加载失败"></p>
<h6 id="2-在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个："><a href="#2-在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个：" class="headerlink" title="2.在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个："></a>2.在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个：</h6><ol>
<li><strong>useBeans</strong><br><code>&lt;jsp:userBean id=&quot;标识符&quot; class=&quot;java&quot; scope=&quot;作用范围&quot; /&gt;</code><ul>
<li><strong>&lt;jsp:</strong>：表示这是jsp动作元素</li>
<li><strong>useBean</strong>：表示这是一个useBean标签</li>
<li><strong>id</strong>：所实例化的JavaBeans唯一标识符</li>
<li><strong>class</strong>：所用到的是哪个Java类，包括包名和类名</li>
<li><strong>scope</strong>：该标签的作用范围<br>使用useBeans动作创建JavaBean的实例,但是由于实体类中并未给属性赋值，故此处输出的属性值为null。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用useBeans动作创建JavaBean的实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"myUsers"</span> <span class="attr">class</span>=<span class="string">"com.po.User"</span> <span class="attr">scope</span>=<span class="string">"page"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>使用useBeans动作创建JavaBean的实例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">%=myUsers.getUsername()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">%=myUsers.getPassword()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p><strong>预览效果：</strong><br>    <img src="/images/jspStudy/useBean.png" alt="图片加载失败"><br>2. <strong>setProperty</strong><br>  作用：给已经实例化的JavaBean对象的属性赋值，一共有四种形式：<br>    1. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;*&quot; /&gt;</code>（跟表单关联）<br>    2. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;JavaBean属性名&quot; /&gt;</code>（跟表单关联）<br>    3. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;JavaBean属性名&quot; value=&quot;BeanValue&quot;/&gt;</code>（手工设置）<br>    4. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;propertyName&quot; param=&quot;request对象中的参数名&quot; /&gt;</code>（跟request参数关联）<br>在演示setProperty的使用效果时，我们首先建立一个带有表单的登陆系统：<em>login.jsp</em><br><strong>property=”*”，表示此时的属性从表单中进行匹配。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登陆系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">action</span>=<span class="string">"dologin.jsp?mypass=999999"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/login.png" alt="图片加载失败"><br>用户通过登陆界面输入登陆所需信息，而登陆的逻辑操作由<em>dologin.jsp</em>完成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"myUsers"</span> <span class="attr">class</span>=<span class="string">"com.po.User"</span> <span class="attr">scope</span>=<span class="string">"page"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>setProperty动作元素使用方法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  根据表单自动匹配所有的属性  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  使用传统表达式方式获取用户名和密码  --&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">%=myUsers.getUsername()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">%=myUsers.getPassword()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在登陆界面提交登录信息（用户名：root 密码：123456），就能获得如下页面：<br><img src="/images/jspStudy/setProperty01.png" alt="图片加载失败"><br><strong>property=”JavaBean属性名”，表示此时的属性由JavaBean进行指定，只获取指定的属性值。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  根据表单匹配部分属性  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于代码中未曾指定password这一属性，输出的结果只有用户名：<br><img src="/images/jspStudy/setProperty02.png" alt="图片加载失败"><br><strong>property=”JavaBean属性名” value=”BeanValue”,该方法在赋值时由value的值决定，并不会使用表单中的值。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  跟表单无关，通过手工赋值给属性  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"李四"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"888888"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处对”username”和”password”分别赋值为”李四”和”888888”,输出的结果就不会再是”root”和”123456”了。<br><img src="/images/jspStudy/setProperty03.png" alt="图片加载失败"><br><strong>property=”propertyName” param=”request对象中的参数名”,此方法可以使用URL传参进行赋值。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   通过URL传参数给属性赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">param</span>=<span class="string">"mypass"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>login.jsp</em> 文件中<code>action=&quot;dologin.jsp?mypass=999999&quot;</code>,通过URL把密码”999999”进行传递：<br><img src="/images/jspStudy/setProperty04.png" alt="图片加载失败"><br>3. <strong>getProperty</strong><br>  作用：获取指定JavaBean对象的属性值<br>  <code>&lt;jsp:getProperty name=&quot;JavaBean实例名&quot; property=属性名 /&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  使用getProperty方法获取用户名和密码  --&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/jspStudy/getProperty01.png" alt="图片加载失败"></p>
<h6 id="3-JavaBean的四个作用范围"><a href="#3-JavaBean的四个作用范围" class="headerlink" title="3.JavaBean的四个作用范围:"></a>3.JavaBean的四个作用范围:</h6><p>使用JavaBeans的scope属性可以用来指定JavaBean的作用范围。</p>
<ul>
<li>page：仅在当前页面有效。</li>
<li>request：可通过HttpRequest.getAttribute()方法取得JavaBean对象。</li>
<li>session：可通过HttpSession.getAttribute()方法取得JavaBean对象。</li>
<li>application：可通过application.getAttribute()方法取得JavaBean对象。<br>为了方便进行演示，在<em>login.jsp</em>文件中添加一个超链接:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"testScope.jsp"</span>&gt;</span>测试scope四个作用于范围<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
并且新建一个<em>testScope.jsp</em>文件，<strong>将<em>dologin.jsp</em>文件中的”scope”属性改为”application”</strong> 来查看效果:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"com.po.User"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TestScope<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>JavaBean的四个作用于范围<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"myUsers"</span> <span class="attr">class</span>=<span class="string">"com.po.User"</span> <span class="attr">scope</span>=<span class="string">"application"</span> /&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"myUsers"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  使用内置对象获取  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  application  --&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">%=((User)application.getAttribute("myUsers")).getUsername()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">%=((User)application.getAttribute("myUsers")).getPassword()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_application.png" alt="图片加载失败"><br><strong>将<em>dologin.jsp</em>和<em>testScope.jsp</em>文件中的”scope”属性改为”session”</strong> 来查看效果:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  session  --&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">%=((User)session.getAttribute("myUsers")).getUsername()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">%=((User)session.getAttribute("myUsers")).getPassword()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_session.png" alt="图片加载失败"><br><strong>将<em>dologin.jsp</em>和<em>testScope.jsp</em>文件中的”scope”属性改为”request”</strong> 来查看效果:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  request  --&gt;</span></span><br><span class="line"> 用户名：<span class="tag">&lt;<span class="name">%=((User)request.getAttribute("myUsers")).getUsername()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> 密码：<span class="tag">&lt;<span class="name">%=((User)request.getAttribute("myUsers")).getPassword()%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_request.png" alt="图片加载失败"><br><strong>将<em>dologin.jsp</em>和<em>testScope.jsp</em>文件中的”scope”属性改为”page”</strong> 来查看效果:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  page  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">       <span class="attr">String</span> <span class="attr">username</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">       <span class="attr">String</span> <span class="attr">password</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">       <span class="attr">if</span> (<span class="attr">pageContext.getAttribute</span>("<span class="attr">myUsers</span>")!=<span class="string">null)&#123;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">username</span> = <span class="string">((User)pageContext.getAttribute(</span>"<span class="attr">myUsers</span>"))<span class="attr">.getUsername</span>();</span></span><br><span class="line"><span class="tag">           <span class="attr">password</span> = <span class="string">((User)pageContext.getAttribute(</span>"<span class="attr">myUsers</span>"))<span class="attr">.getPassword</span>();</span></span><br><span class="line"><span class="tag">       &#125;</span></span><br><span class="line"><span class="tag">   %&gt;</span></span><br><span class="line">       用户名：<span class="tag">&lt;<span class="name">%=username%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       密码：<span class="tag">&lt;<span class="name">%=password%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_page.png" alt="图片加载失败"></p>
]]></content>
      <categories>
        <category>JSP课程学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2020/02/04/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在文字前添加#，使之成为标题。<br>一个#是一级标题，两个#是二级标题，以此类推到六级标题。<br>注：标准语法一般在#后面跟个空格在写文字。</p>
<a id="more"></a>

<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>
<p>  对应的HTML：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;这是一级标题&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;这是二级标题&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;这是三级标题&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;这是四级标题&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;这是五级标题&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;这是六级标题&lt;&#x2F;h6&gt;</span><br></pre></td></tr></table></figure>

<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>中间没有空行的连续不断的几行文字被视为一个段落。<br><strong>Markdown：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h2 id="行内格式"><a href="#行内格式" class="headerlink" title="行内格式"></a>行内格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文本**加黑**</span><br><span class="line">文本*斜体*</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong><br>文本<strong>加黑</strong><br>文本<em>斜体</em><br><strong>对应的HTML:</strong>p</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  文本</span><br><span class="line">  &lt;strong&gt;加黑&lt;&#x2F;strong&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  文本</span><br><span class="line">  &lt;em&gt;斜体&lt;&#x2F;em&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用段落一。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 引用段落二。</span><br><span class="line">&gt;&gt; 内嵌引用块段落一。</span><br><span class="line">&gt;</span><br><span class="line">&gt; ### 引用块内的标题</span><br></pre></td></tr></table></figure>
<p><strong>预览</strong></p>
<blockquote>
<p>引用段落一。</p>
<p>引用段落二。</p>
<blockquote>
<p>内嵌引用块段落一。</p>
</blockquote>
<h3 id="引用块内的标题"><a href="#引用块内的标题" class="headerlink" title="引用块内的标题"></a>引用块内的标题</h3></blockquote>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blockquote&gt;</span><br><span class="line">  &lt;p&gt;引用段落一。&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;引用段落二。&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;blockquote&gt;</span><br><span class="line">    &lt;p&gt;内嵌引用块段落一。&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;blockquote&gt;</span><br><span class="line">  &lt;h3 id&#x3D;&quot;引用块内的标题&quot;&gt;引用块内的标题&quot;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;blockquote&gt;</span><br></pre></td></tr></table></figure>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行内式[博客](https:&#x2F;&#x2F;1029322685.github.io&#x2F; &quot;Leon&#39;s blog&quot;)链接，带title。</span><br><span class="line">行内式[GitHub](https:&#x2F;&#x2F;github.com&#x2F;1029322685)链接。</span><br><span class="line">引用式[博客][1]链接。</span><br><span class="line">引用式[GitHub][2]链接，带title。</span><br><span class="line"></span><br><span class="line">[1]:https:&#x2F;&#x2F;1029322685.github.io&#x2F;</span><br><span class="line">[2]:https:&#x2F;&#x2F;github.com&#x2F;1029322685 &quot;我的GitHub主页&quot;</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong><br>行内式<a href="https://1029322685.github.io/" target="_blank" rel="noopener" title="Leon&#39;s blog">博客</a>链接，带title。<br>行内式<a href="https://github.com/1029322685" target="_blank" rel="noopener">GitHub</a>链接。<br>引用式<a href="https://1029322685.github.io/" target="_blank" rel="noopener">博客</a>链接。<br>引用式<a href="https://github.com/1029322685" target="_blank" rel="noopener" title="我的GitHub主页">GitHub</a>链接，带title。</p>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;行内式&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;1029322685.github.io&#x2F;&quot; title&#x3D;&quot;Leon&#39;s blog&quot;&gt;博客&lt;&#x2F;a&gt;链接，带title。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;行内式&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;1029322685&quot;&gt;GitHub&lt;&#x2F;a&gt;链接。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;引用式&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;1## 图片029322685.github.io&#x2F;&quot;&gt;博客&lt;&#x2F;a&gt;链接。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;引用式&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;1029322685&quot; title&#x3D;&quot;Leon&#39;s blog&quot;&gt;GitHub&lt;&#x2F;a&gt;链接，带title。&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>在超链接的写法前加一个！就是引用图片的方法。<br><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片加载失败](&#x2F;images&#x2F;pic01.jpg &quot;pic&quot;)</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong><br><img src="/images/pic01.jpg" alt="图片加载失败" title="pic"><br><strong>对应的HTML:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;images&#x2F;pic01.jpg&quot; alt&#x3D;&quot;图片加载失败&quot; title&#x3D;&quot;pic&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- list one</span><br><span class="line">- list two</span><br><span class="line">- list three</span><br><span class="line"></span><br><span class="line">1. list one</span><br><span class="line">2. list two</span><br><span class="line">3. list three</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong></p>
<ul>
<li>list one</li>
<li>list two</li>
<li>list three</li>
</ul>
<ol>
<li>list one</li>
<li>list two</li>
<li>list three</li>
</ol>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;list one&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;list two&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;list three&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;list one&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;list two&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;list three&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>
<p><strong>其中无序列表的标记可以使用 +、- 或 *有序列表前的数字可以是乱序的</strong></p>
<h2 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h2><p>使用一个单独行里的三个或以上 *、- 来生产一条水平分割线，它们之间可以有空格。<br><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----</span><br></pre></td></tr></table></figure>

<h2 id="预览："><a href="#预览：" class="headerlink" title="预览："></a><strong>预览：</strong></h2><p><strong>对应的HTML:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;hr&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>反斜线\用于插入在 Markdown 语法中有特殊作用的字符。<br>特殊字符包括：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\</span><br><span class="line">&#96;</span><br><span class="line">*</span><br><span class="line">_</span><br><span class="line">&#123;&#125;</span><br><span class="line">[]</span><br><span class="line">()</span><br><span class="line">#</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">.</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
<p><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是*演示*文本</span><br><span class="line">这是\*演示\*文本</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong><br>这是<em>演示</em>文本<br>这是*演示*文本</p>
<h2 id="嵌入HTML"><a href="#嵌入HTML" class="headerlink" title="嵌入HTML"></a>嵌入HTML</h2><p>Markdown 标记语言的目的不是替代 HTML，也不是发明一种更便捷的插入 HTML 标签的方式。它对应的只是 HTML 标签的一个很小的子集。</p>
<p>对于那些没有办法用 Markdown 语法来对应的 HTML 标签，直接使用 HTML 来写就好了。</p>
<h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这就是~~删除线~~</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong><br>这就是<del>删除线</del></p>
<h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p>在上面的代码块语法基础上，在第一组 ``` 之后添加代码的语言，如 ‘javascript’ 或 ‘js’，即可将代码标记为 JavaScript：</p>
<p><strong>预览：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window loaded'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。<br><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name | age</span><br><span class="line">---- | ---</span><br><span class="line">LearnShare | 12</span><br><span class="line">Mike |  32</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong></p>
<table>
<thead>
<tr>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>LearnShare</td>
<td>12</td>
</tr>
<tr>
<td>Mike</td>
<td>32</td>
</tr>
</tbody></table>
<p>为了使Markdown更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外就不需要了）。</p>
<h2 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h2><p><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] Eat</span><br><span class="line">- [x] Code</span><br><span class="line">  - [x] HTML</span><br><span class="line">  - [x] CSS</span><br><span class="line">  - [x] JavaScript</span><br><span class="line">- [ ] Sleep</span><br></pre></td></tr></table></figure>
<p><strong>预览：</strong></p>
<ul>
<li><input disabled="" type="checkbox"> Eat</li>
<li><input checked="" disabled="" type="checkbox"> Code<ul>
<li><input checked="" disabled="" type="checkbox"> HTML</li>
<li><input checked="" disabled="" type="checkbox"> CSS</li>
<li><input checked="" disabled="" type="checkbox"> JavaScript</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Sleep</li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>分享</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
